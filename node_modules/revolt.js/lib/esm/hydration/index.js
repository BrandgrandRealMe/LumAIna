import { botHydration } from "./bot";
import { channelHydration } from "./channel";
import { channelUnreadHydration } from "./channelUnread";
import { channelWebhookHydration } from "./channelWebhook";
import { emojiHydration } from "./emoji";
import { messageHydration } from "./message";
import { serverHydration } from "./server";
import { serverMemberHydration } from "./serverMember";
import { sessionHydration } from "./session";
import { userHydration } from "./user";
export { BotFlags } from "./bot";
export { ServerFlags } from "./server";
export { UserBadges, UserFlags } from "./user";
/**
 * Hydrate some data
 * @param hydration Hydration data
 * @param input Input data
 * @returns Output data
 */
function hydrateInternal(hydration, input, context) {
    return Object.keys(input).reduce((acc, key) => {
        let targetKey, value;
        try {
            targetKey = hydration.keyMapping[key] ?? key;
            value = hydration.functions[targetKey](input, context);
        }
        catch (err) {
            if (key === "type")
                return acc;
            console.debug(`Skipping key ${String(key)} during hydration!`);
            return acc;
        }
        return {
            ...acc,
            [targetKey]: value,
        };
    }, {});
}
const hydrators = {
    bot: botHydration,
    channel: channelHydration,
    channelUnread: channelUnreadHydration,
    channelWebhook: channelWebhookHydration,
    emoji: emojiHydration,
    message: messageHydration,
    server: serverHydration,
    serverMember: serverMemberHydration,
    session: sessionHydration,
    user: userHydration,
};
/**
 * Hydrate some input with a given type
 * @param type Type
 * @param input Input Object
 * @param initial Whether this is the initial hydration
 * @returns Hydrated Object
 */
export function hydrate(type, input, context, initial) {
    return hydrateInternal(hydrators[type], initial ? { ...hydrators[type].initialHydration(), ...input } : input, context);
}
