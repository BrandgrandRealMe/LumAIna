import { DataEditUser, Presence } from "revolt-api";
import { UserCollection } from "../collections";
/**
 * User Class
 */
export declare class User {
    #private;
    readonly id: string;
    /**
     * Construct User
     * @param collection Collection
     * @param id Id
     */
    constructor(collection: UserCollection, id: string);
    /**
     * Write to string as a user mention
     * @returns Formatted String
     */
    toString(): string;
    /**
     * Time when this user created their account
     */
    get createdAt(): Date;
    /**
     * Username
     */
    get username(): string;
    /**
     * Avatar
     */
    get avatar(): import("./File").File | undefined;
    /**
     * Badges
     */
    get badges(): import("..").UserBadges;
    /**
     * User Status
     */
    get status(): {
        text?: string | null | undefined;
        presence?: "Online" | "Idle" | "Focus" | "Busy" | "Invisible" | null | undefined;
    } | undefined;
    /**
     * Relationship with user
     */
    get relationship(): "User" | "None" | "Friend" | "Outgoing" | "Incoming" | "Blocked" | "BlockedOther";
    /**
     * Whether the user is online
     */
    get online(): boolean;
    /**
     * Whether the user is privileged
     */
    get privileged(): boolean;
    /**
     * Flags
     */
    get flags(): import("..").UserFlags;
    /**
     * Bot information
     */
    get bot(): {
        owner: string;
    } | undefined;
    /**
     * URL to the user's default avatar
     */
    get defaultAvatarURL(): string;
    /**
     * URL to the user's avatar
     */
    get avatarURL(): string;
    /**
     * URL to the user's animated avatar
     */
    get animatedAvatarURL(): string;
    /**
     * Presence
     */
    get presence(): "Online" | "Idle" | "Focus" | "Busy" | "Invisible";
    /**
     * Generate status message
     * @param translate Translation function
     * @returns Status message
     */
    statusMessage(translate?: (presence: Presence) => string): string | undefined;
    /**
     * Permissions against this user
     */
    get permission(): number;
    /**
     * Edit the user
     * @param data Changes
     */
    edit(data: DataEditUser): Promise<void>;
    /**
     * Change the username of the current user
     * @param username New username
     * @param password Current password
     */
    changeUsername(username: string, password: string): Promise<{
        _id: string;
        username: string;
        discriminator: string;
        display_name?: string | null | undefined;
        avatar?: {
            _id: string;
            tag: string;
            filename: string;
            metadata: {
                type: "File";
            } | {
                type: "Text";
            } | {
                type: "Image";
                width: number;
                height: number;
            } | {
                type: "Video";
                width: number;
                height: number;
            } | {
                type: "Audio";
            };
            content_type: string;
            size: number;
            deleted?: boolean | null | undefined;
            reported?: boolean | null | undefined;
            message_id?: string | null | undefined;
            user_id?: string | null | undefined;
            server_id?: string | null | undefined;
            object_id?: string | null | undefined;
        } | null | undefined;
        relations?: {
            _id: string;
            status: "User" | "None" | "Friend" | "Outgoing" | "Incoming" | "Blocked" | "BlockedOther";
        }[] | null | undefined;
        badges?: number | null | undefined;
        status?: {
            text?: string | null | undefined;
            presence?: "Online" | "Idle" | "Focus" | "Busy" | "Invisible" | null | undefined;
        } | null | undefined;
        profile?: {
            content?: string | null | undefined;
            background?: {
                _id: string;
                tag: string;
                filename: string;
                metadata: {
                    type: "File";
                } | {
                    type: "Text";
                } | {
                    type: "Image";
                    width: number;
                    height: number;
                } | {
                    type: "Video";
                    width: number;
                    height: number;
                } | {
                    type: "Audio";
                };
                content_type: string;
                size: number;
                deleted?: boolean | null | undefined;
                reported?: boolean | null | undefined;
                message_id?: string | null | undefined;
                user_id?: string | null | undefined;
                server_id?: string | null | undefined;
                object_id?: string | null | undefined;
            } | null | undefined;
        } | null | undefined;
        flags?: number | null | undefined;
        privileged?: boolean | undefined;
        bot?: {
            owner: string;
        } | null | undefined;
        relationship?: "User" | "None" | "Friend" | "Outgoing" | "Incoming" | "Blocked" | "BlockedOther" | null | undefined;
        online?: boolean | null | undefined;
    }>;
    /**
     * Open a DM with a user
     * @returns DM Channel
     */
    openDM(): Promise<import("./Channel").Channel>;
    /**
     * Send a friend request to a user
     */
    addFriend(): Promise<User>;
    /**
     * Remove a user from the friend list
     */
    removeFriend(): Promise<void>;
    /**
     * Block a user
     */
    blockUser(): Promise<void>;
    /**
     * Unblock a user
     */
    unblockUser(): Promise<void>;
    /**
     * Fetch the profile of a user
     * @returns The profile of the user
     */
    fetchProfile(): Promise<{
        content?: string | null | undefined;
        background?: {
            _id: string;
            tag: string;
            filename: string;
            metadata: {
                type: "File";
            } | {
                type: "Text";
            } | {
                type: "Image";
                width: number;
                height: number;
            } | {
                type: "Video";
                width: number;
                height: number;
            } | {
                type: "Audio";
            };
            content_type: string;
            size: number;
            deleted?: boolean | null | undefined;
            reported?: boolean | null | undefined;
            message_id?: string | null | undefined;
            user_id?: string | null | undefined;
            server_id?: string | null | undefined;
            object_id?: string | null | undefined;
        } | null | undefined;
    }>;
    /**
     * Fetch the mutual connections of the current user and a target user
     * @returns The mutual connections of the current user and a target user
     */
    fetchMutual(): Promise<{
        users: string[];
        servers: string[];
    }>;
}
//# sourceMappingURL=User.d.ts.map