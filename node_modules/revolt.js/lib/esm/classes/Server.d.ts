import type { Category, DataBanCreate, DataCreateChannel, DataCreateEmoji, DataEditRole, DataEditServer, Override } from "revolt-api";
import { ServerMember, User } from "..";
import { ServerCollection } from "../collections";
import { Permission } from "../permissions/definitions";
import { Channel } from "./Channel";
import { ChannelInvite } from "./Invite";
import { ServerBan } from "./ServerBan";
/**
 * Server Class
 */
export declare class Server {
    #private;
    readonly id: string;
    /**
     * Construct Server
     * @param collection Collection
     * @param id Id
     */
    constructor(collection: ServerCollection, id: string);
    /**
     * Convert to string
     * @returns String
     */
    toString(): string;
    /**
     * Time when this server was created
     */
    get createdAt(): Date;
    /**
     * Owner's user ID
     */
    get ownerId(): string;
    /**
     * Owner
     */
    get owner(): User | undefined;
    /**
     * Name
     */
    get name(): string;
    /**
     * Description
     */
    get description(): string | undefined;
    /**
     * Icon
     */
    get icon(): import("./File").File | undefined;
    /**
     * Banner
     */
    get banner(): import("./File").File | undefined;
    /**
     * Channel IDs
     */
    get channelIds(): import("@solid-primitives/set").ReactiveSet<string>;
    /**
     * Channels
     */
    get channels(): Channel[];
    /**
     * Categories
     */
    get categories(): {
        id: string;
        title: string;
        channels: string[];
    }[] | undefined;
    /**
     * System message channels
     */
    get systemMessages(): {
        user_joined?: string | null | undefined;
        user_left?: string | null | undefined;
        user_kicked?: string | null | undefined;
        user_banned?: string | null | undefined;
    } | undefined;
    /**
     * Roles
     */
    get roles(): import("@solid-primitives/map").ReactiveMap<string, {
        name: string;
        permissions: {
            a: number;
            d: number;
        };
        colour?: string | null | undefined;
        hoist?: boolean | undefined;
        rank?: number | undefined;
    }>;
    /**
     * Default permissions
     */
    get defaultPermissions(): number;
    /**
     * Server flags
     */
    get flags(): import("..").ServerFlags;
    /**
     * Whether analytics are enabled for this server
     */
    get analytics(): boolean;
    /**
     * Whether this server is publicly discoverable
     */
    get discoverable(): boolean;
    /**
     * Whether this server is marked as mature
     */
    get mature(): boolean;
    /**
     * Get an array of ordered categories with their respective channels.
     * Uncategorised channels are returned in `id="default"` category.
     */
    get orderedChannels(): (Omit<Category, "channels"> & {
        channels: Channel[];
    })[];
    /**
     * Default channel for this server
     */
    get defaultChannel(): Channel | undefined;
    /**
     * Get an ordered array of roles with their IDs attached.
     * The highest ranking roles will be first followed by lower
     * ranking roles. This is dictated by the "rank" property
     * which is smaller for higher priority roles.
     */
    get orderedRoles(): {
        name: string;
        permissions: {
            a: number;
            d: number;
        };
        colour?: string | null | undefined;
        hoist?: boolean | undefined;
        rank?: number | undefined;
        id: string;
    }[];
    /**
     * Check whether the server is currently unread
     * @returns Whether the server is unread
     */
    get unread(): Channel | undefined;
    /**
     * Find all message IDs of unread messages
     * @returns Array of message IDs which are unread
     */
    get mentions(): string[];
    /**
     * URL to the server's icon
     */
    get iconURL(): string | undefined;
    /**
     * URL to the server's animated icon
     */
    get animatedIconURL(): string | undefined;
    /**
     * URL to the server's banner
     */
    get bannerURL(): string | undefined;
    /**
     * Own member object for this server
     */
    get member(): ServerMember | undefined;
    /**
     * Permission the currently authenticated user has against this server
     */
    get permission(): number;
    /**
     * Check whether we have a given permission in a server
     * @param permission Permission Names
     * @returns Whether we have this permission
     */
    havePermission(...permission: (keyof typeof Permission)[]): boolean;
    /**
     * Check whether we have at least one of the given permissions in a server
     * @param permission Permission Names
     * @returns Whether we have one of the permissions
     */
    orPermission(...permission: (keyof typeof Permission)[]): boolean;
    /**
     * Create a channel
     * @param data Channel create route data
     * @returns The newly-created channel
     */
    createChannel(data: DataCreateChannel): Promise<Channel>;
    /**
     * Edit a server
     * @param data Changes
     */
    edit(data: DataEditServer): Promise<void>;
    /**
     * Delete or leave a server
     * @param leaveSilently Whether to not send a message on leave
     */
    delete(leaveSilently?: boolean): Promise<void>;
    /**
     * Mark a server as read
     */
    ack(): Promise<void>;
    /**
     * Ban user from this server
     * @param user User
     * @param options Ban options
     */
    banUser(user: string | User | ServerMember, options?: DataBanCreate): Promise<ServerBan>;
    /**
     * Kick user from this server
     * @param user User
     */
    kickUser(user: string | User | ServerMember): Promise<undefined>;
    /**
     * Pardon user's ban
     * @param user User
     */
    unbanUser(user: string | User): Promise<undefined>;
    /**
     * Fetch a server's invites
     * @returns An array of the server's invites
     */
    fetchInvites(): Promise<ChannelInvite[]>;
    /**
     * Fetch a server's bans
     * @returns An array of the server's bans.
     */
    fetchBans(): Promise<ServerBan[]>;
    /**
     * Set role permissions
     * @param roleId Role Id, set to 'default' to affect all users
     * @param permissions Permission value
     */
    setPermissions(roleId: string | undefined, permissions: Override | number): Promise<{
        _id: string;
        owner: string;
        name: string;
        description?: string | null | undefined;
        channels: string[];
        categories?: {
            id: string;
            title: string;
            channels: string[];
        }[] | null | undefined;
        system_messages?: {
            user_joined?: string | null | undefined;
            user_left?: string | null | undefined;
            user_kicked?: string | null | undefined;
            user_banned?: string | null | undefined;
        } | null | undefined;
        roles?: {
            [key: string]: {
                name: string;
                permissions: {
                    a: number;
                    d: number;
                };
                colour?: string | null | undefined;
                hoist?: boolean | undefined;
                rank?: number | undefined;
            };
        } | undefined;
        default_permissions: number;
        icon?: {
            _id: string;
            tag: string;
            filename: string;
            metadata: {
                type: "File";
            } | {
                type: "Text";
            } | {
                type: "Image";
                width: number;
                height: number;
            } | {
                type: "Video";
                width: number;
                height: number;
            } | {
                type: "Audio";
            };
            content_type: string;
            size: number;
            deleted?: boolean | null | undefined;
            reported?: boolean | null | undefined;
            message_id?: string | null | undefined;
            user_id?: string | null | undefined;
            server_id?: string | null | undefined;
            object_id?: string | null | undefined;
        } | null | undefined;
        banner?: {
            _id: string;
            tag: string;
            filename: string;
            metadata: {
                type: "File";
            } | {
                type: "Text";
            } | {
                type: "Image";
                width: number;
                height: number;
            } | {
                type: "Video";
                width: number;
                height: number;
            } | {
                type: "Audio";
            };
            content_type: string;
            size: number;
            deleted?: boolean | null | undefined;
            reported?: boolean | null | undefined;
            message_id?: string | null | undefined;
            user_id?: string | null | undefined;
            server_id?: string | null | undefined;
            object_id?: string | null | undefined;
        } | null | undefined;
        flags?: number | null | undefined;
        nsfw?: boolean | undefined;
        analytics?: boolean | undefined;
        discoverable?: boolean | undefined;
    }>;
    /**
     * Create role
     * @param name Role name
     */
    createRole(name: string): Promise<{
        id: string;
        role: {
            name: string;
            permissions: {
                a: number;
                d: number;
            };
            colour?: string | null | undefined;
            hoist?: boolean | undefined;
            rank?: number | undefined;
        };
    }>;
    /**
     * Edit a role
     * @param roleId Role ID
     * @param data Role editing route data
     */
    editRole(roleId: string, data: DataEditRole): Promise<{
        name: string;
        permissions: {
            a: number;
            d: number;
        };
        colour?: string | null | undefined;
        hoist?: boolean | undefined;
        rank?: number | undefined;
    }>;
    /**
     * Delete role
     * @param roleId Role ID
     */
    deleteRole(roleId: string): Promise<undefined>;
    /**
     * Fetch a server member
     * @param user User
     * @returns Server member object
     */
    fetchMember(user: User | string): Promise<ServerMember>;
    /**
     * Optimised member fetch route
     * @param excludeOffline
     */
    syncMembers(excludeOffline?: boolean): Promise<void>;
    /**
     * Reset member sync status
     */
    resetSyncStatus(): void;
    /**
     * Fetch a server's members
     * @returns List of the server's members and their user objects
     */
    fetchMembers(): Promise<{
        members: ServerMember[];
        users: User[];
    }>;
    /**
     * Query members from a server by name
     * @param query Name
     * @returns List of the server's members and their user objects
     */
    queryMembersExperimental(query: string): Promise<{
        members: ServerMember[];
        users: User[];
    }>;
    /**
     * Create an emoji on the server
     * @param autumnId Autumn Id
     * @param options Options
     */
    createEmoji(autumnId: string, options: Omit<DataCreateEmoji, "parent">): Promise<import("./Emoji").Emoji>;
    /**
     * Fetch a server's emoji
     * @returns List of server emoji
     */
    fetchEmojis(): Promise<import("./Emoji").Emoji[]>;
}
//# sourceMappingURL=Server.d.ts.map