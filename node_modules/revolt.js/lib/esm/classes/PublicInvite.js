import { batch } from "solid-js";
import { File } from "..";
/**
 * Public Channel Invite
 */
export class PublicChannelInvite {
    client;
    type;
    /**
     * Construct Channel Invite
     * @param client Client
     * @param type Type
     */
    constructor(client, type = "None") {
        this.client = client;
        this.type = type;
    }
    /**
     * Create an Invite from an API Invite Response
     * @param client Client
     * @param invite Data
     * @returns Invite
     */
    static from(client, invite) {
        switch (invite.type) {
            case "Server":
                return new ServerPublicInvite(client, invite);
            default:
                return new UnknownPublicInvite(client);
        }
    }
}
/**
 * Public invite of unknown type
 */
export class UnknownPublicInvite extends PublicChannelInvite {
}
/**
 * Public Server Invite
 */
export class ServerPublicInvite extends PublicChannelInvite {
    code;
    userName;
    userAvatar;
    serverId;
    serverName;
    serverIcon;
    serverBanner;
    serverFlags;
    memberCount;
    channelId;
    channelName;
    channelDescription;
    /**
     * Construct Server Invite
     * @param client Client
     * @param invite Invite
     */
    constructor(client, invite) {
        super(client, "Server");
        this.code = invite.code;
        this.userName = invite.user_name;
        this.userAvatar = invite.user_avatar
            ? new File(client, invite.user_avatar)
            : undefined;
        this.serverId = invite.server_id;
        this.serverName = invite.server_name;
        this.serverIcon = invite.server_icon
            ? new File(client, invite.server_icon)
            : undefined;
        this.serverBanner = invite.server_banner
            ? new File(client, invite.server_banner)
            : undefined;
        this.serverFlags = invite.server_flags ?? 0;
        this.memberCount = invite.member_count;
        this.channelId = invite.channel_id;
        this.channelName = invite.channel_name;
        this.channelDescription = invite.channel_description;
    }
    /**
     * Join the server
     */
    async join() {
        const existingServer = this.client.servers.get(this.serverId);
        if (existingServer)
            return existingServer;
        const { server, channels } = await this.client.api.post(`/invites/${this.code}`);
        return batch(() => {
            for (const channel of channels) {
                this.client.channels.getOrCreate(channel._id, channel);
            }
            return this.client.servers.getOrCreate(server._id, server, true);
        });
    }
}
