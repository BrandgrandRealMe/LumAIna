/**
 * Channel Invite
 */
export class ChannelInvite {
    client;
    type;
    /**
     * Construct Channel Invite
     * @param client Client
     * @param type Type
     */
    constructor(client, type = "None") {
        this.client = client;
        this.type = type;
    }
    /**
     * Create an Invite from an API Invite
     * @param client Client
     * @param invite Data
     * @returns Invite
     */
    static from(client, invite) {
        switch (invite.type) {
            case "Server":
                return new ServerInvite(client, invite);
            default:
                return new UnknownInvite(client);
        }
    }
}
/**
 * Invite of unknown type
 */
export class UnknownInvite extends ChannelInvite {
}
/**
 * Server Invite
 */
export class ServerInvite extends ChannelInvite {
    id;
    creatorId;
    serverId;
    channelId;
    /**
     * Construct Server Invite
     * @param client Client
     * @param invite Invite
     */
    constructor(client, invite) {
        super(client, "Server");
        this.id = invite._id;
        this.creatorId = invite.creator;
        this.serverId = invite.server;
        this.channelId = invite.server;
    }
    /**
     * Creator of the invite
     */
    get creator() {
        return this.client.users.get(this.creatorId);
    }
    /**
     * Server this invite points to
     */
    get server() {
        return this.client.servers.get(this.serverId);
    }
    /**
     * Channel this invite points to
     */
    get channel() {
        return this.client.channels.get(this.channelId);
    }
    /**
     * Delete the invite
     */
    async delete() {
        await this.client.api.delete(`/invites/${this.id}`);
    }
}
