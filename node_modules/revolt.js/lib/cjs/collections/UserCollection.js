"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserCollection = void 0;
const __1 = require("..");
const _1 = require(".");
/**
 * Collection of Users
 */
class UserCollection extends _1.ClassCollection {
    /**
     * Construct User collection
     */
    constructor(client) {
        super(client);
        const SYSTEM_ID = "0".repeat(26);
        this.getOrCreate(SYSTEM_ID, {
            _id: SYSTEM_ID,
            username: "Revolt",
            discriminator: "0000",
        });
    }
    /**
     * Fetch user by ID
     * @param id Id
     * @returns User
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = this.get(id);
            if (user)
                return user;
            const data = yield this.client.api.get(`/users/${id}`);
            return this.getOrCreate(data._id, data);
        });
    }
    /**
     * Get or create
     * @param id Id
     * @param data Data
     * @param isNew Whether this object is new
     */
    getOrCreate(id, data) {
        if (this.has(id)) {
            return this.get(id);
        }
        else {
            const instance = new __1.User(this, id);
            this.create(id, "user", instance, this.client, data);
            return instance;
        }
    }
    /**
     * Get or return partial
     * @param id Id
     */
    getOrPartial(id) {
        if (this.has(id)) {
            return this.get(id);
        }
        else if (this.client.options.partials) {
            const instance = new __1.User(this, id);
            this.create(id, "user", instance, this.client, {
                id,
                partial: true,
            });
            return instance;
        }
    }
}
exports.UserCollection = UserCollection;
