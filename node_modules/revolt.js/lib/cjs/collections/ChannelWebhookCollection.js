"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelWebhookCollection = void 0;
const ChannelWebhook_1 = require("../classes/ChannelWebhook");
const _1 = require(".");
/**
 * Collection of Channel Webhooks
 */
class ChannelWebhookCollection extends _1.ClassCollection {
    /**
     * Fetch webhook by ID
     * @param id Id
     * @returns Webhook
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const webhook = this.get(id);
            if (webhook)
                return webhook;
            const data = yield this.client.api.get(`/webhooks/${id}`);
            return this.getOrCreate(data.id, data);
        });
    }
    /**
     * Create webhook with ID and token
     * @param id Id
     * @param token Token
     * @returns Webhook
     */
    fromToken(id, token) {
        return __awaiter(this, void 0, void 0, function* () {
            const webhook = this.get(id);
            if (webhook)
                return webhook;
            const data = yield this.client.api.get(`/webhooks/${id}/${token}`);
            return this.getOrCreate(data.id, data);
        });
    }
    /**
     * Get or create
     * @param id Id
     * @param data Data
     */
    getOrCreate(id, data) {
        if (this.has(id)) {
            return this.get(id);
        }
        else {
            const instance = new ChannelWebhook_1.ChannelWebhook(this, id);
            this.create(id, "channelWebhook", instance, this.client, data);
            return instance;
        }
    }
}
exports.ChannelWebhookCollection = ChannelWebhookCollection;
