"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotCollection = void 0;
const solid_js_1 = require("solid-js");
const __1 = require("..");
const _1 = require(".");
/**
 * Collection of Bots
 */
class BotCollection extends _1.ClassCollection {
    /**
     * Fetch bot by ID
     * @param id Id
     * @returns Bot
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const bot = this.get(id);
            if (bot)
                return bot;
            const data = yield this.client.api.get(`/bots/${id}`);
            this.client.users.getOrCreate(data.user._id, data.user);
            return this.getOrCreate(data.bot._id, data.bot);
        });
    }
    /**
     * Fetch owned bots
     * @returns List of bots
     */
    fetchOwned() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = (yield this.client.api.get("/bots/@me"));
            return (0, solid_js_1.batch)(() => {
                data.users.forEach((user) => this.client.users.getOrCreate(user._id, user));
                return data.bots.map((bot) => this.getOrCreate(bot._id, bot));
            });
        });
    }
    /**
     * Fetch public bot by ID
     * @param id Id
     * @returns Public Bot
     */
    fetchPublic(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.api.get(`/bots/${id}/invite`);
            return new __1.PublicBot(this.client, data);
        });
    }
    /**
     * Get or create
     * @param id Id
     * @param data Data
     * @returns Bot
     */
    getOrCreate(id, data) {
        if (this.has(id)) {
            return this.get(id);
        }
        else {
            const instance = new __1.Bot(this, id);
            this.create(id, "bot", instance, this.client, data);
            return instance;
        }
    }
    /**
     * Create a bot
     * @param name Bot name
     * @returns The newly-created bot
     */
    createBot(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const bot = yield this.client.api.post(`/bots/create`, {
                name,
            });
            return this.getOrCreate(bot._id, bot);
        });
    }
}
exports.BotCollection = BotCollection;
