"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelCollection = void 0;
const __1 = require("..");
const _1 = require(".");
/**
 * Collection of Channels
 */
class ChannelCollection extends _1.ClassCollection {
    /**
     * Delete an object
     * @param id Id
     */
    delete(id) {
        var _a;
        const channel = this.get(id);
        (_a = channel === null || channel === void 0 ? void 0 : channel.server) === null || _a === void 0 ? void 0 : _a.channelIds.delete(id);
        super.delete(id);
    }
    /**
     * Fetch channel by ID
     * @param id Id
     * @returns Channel
     */
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const channel = this.get(id);
            if (channel)
                return channel;
            const data = yield this.client.api.get(`/channels/${id}`);
            return this.getOrCreate(data._id, data);
        });
    }
    /**
     * Get or create
     * @param id Id
     * @param data Data
     * @param isNew Whether this object is new
     */
    getOrCreate(id, data, isNew = false) {
        if (this.has(id)) {
            return this.get(id);
        }
        else {
            const instance = new __1.Channel(this, id);
            this.create(id, "channel", instance, this.client, data);
            isNew && this.client.emit("channelCreate", instance);
            return instance;
        }
    }
    /**
     * Get or return partial
     * @param id Id
     */
    getOrPartial(id) {
        if (this.has(id)) {
            return this.get(id);
        }
        else if (this.client.options.partials) {
            const instance = new __1.Channel(this, id);
            this.create(id, "channel", instance, this.client, {
                id,
                partial: true,
            });
            return instance;
        }
    }
    /**
     * Create a group
     * @param name Group name
     * @param users Users to add
     * @returns The newly-created group
     */
    createGroup(name, users) {
        return __awaiter(this, void 0, void 0, function* () {
            const group = yield this.client.api.post(`/channels/create`, {
                name,
                users: users.map((user) => (user instanceof __1.User ? user.id : user)),
            });
            return this.getOrCreate(group._id, group, true);
        });
    }
}
exports.ChannelCollection = ChannelCollection;
