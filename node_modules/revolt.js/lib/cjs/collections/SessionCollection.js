"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionCollection = void 0;
const solid_js_1 = require("solid-js");
const classes_1 = require("../classes");
const _1 = require(".");
/**
 * Collection of Sessions
 */
class SessionCollection extends _1.ClassCollection {
    /**
     * Fetch active sessions
     * @returns List of sessions
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.api.get("/auth/session/all");
            return (0, solid_js_1.batch)(() => data.map((session) => this.getOrCreate(session._id, session)));
        });
    }
    /**
     * Delete all sessions, optionally including self
     * @param revokeSelf Whether to remove current session too
     */
    deleteAll(revokeSelf = false) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.api.delete("/auth/session/all", {
                revoke_self: revokeSelf,
            });
            for (const entry of this.toList()) {
                if (!revokeSelf && entry.current)
                    continue;
                this.delete(entry.id);
            }
        });
    }
    /**
     * Get or create
     * @param id Id
     * @param data Data
     * @returns Session
     */
    getOrCreate(id, data) {
        if (this.has(id)) {
            return this.get(id);
        }
        else {
            const instance = new classes_1.Session(this, id);
            this.create(id, "session", instance, this.client, data);
            return instance;
        }
    }
}
exports.SessionCollection = SessionCollection;
