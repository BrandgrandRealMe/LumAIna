"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _File_client;
Object.defineProperty(exports, "__esModule", { value: true });
exports.File = void 0;
/**
 * Uploaded File
 */
class File {
    /**
     * Construct File
     * @param client Client
     * @param file File
     */
    constructor(client, file) {
        _File_client.set(this, void 0);
        __classPrivateFieldSet(this, _File_client, client, "f");
        this.id = file._id;
        this.tag = file.tag;
        this.filename = file.filename;
        this.metadata = file.metadata;
        this.contentType = file.content_type;
        this.size = file.size;
    }
    /**
     * Direct URL to the file
     */
    get url() {
        var _a;
        return `${(_a = __classPrivateFieldGet(this, _File_client, "f").configuration) === null || _a === void 0 ? void 0 : _a.features.autumn.url}/${this.tag}/${this.id}/${this.filename}`;
    }
    /**
     * Download URL for the file
     */
    get downloadURL() {
        var _a;
        return `${(_a = __classPrivateFieldGet(this, _File_client, "f").configuration) === null || _a === void 0 ? void 0 : _a.features.autumn.url}/${this.tag}/download/${this.id}/${this.filename}`;
    }
    /**
     * Human readable file size
     */
    get humanReadableSize() {
        if (!this.size)
            return "Unknown size";
        if (this.size > 1e6) {
            return `${(this.size / 1e6).toFixed(2)} MB`;
        }
        else if (this.size > 1e3) {
            return `${(this.size / 1e3).toFixed(2)} KB`;
        }
        return `${this.size} B`;
    }
    /**
     * Whether this file should have a spoiler
     */
    get isSpoiler() {
        var _a, _b;
        return (_b = (_a = this.filename) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith("spoiler_")) !== null && _b !== void 0 ? _b : false;
    }
    /**
     * Creates a URL to a given file with given options.
     * @param options Optional query parameters to modify object
     * @param allowAnimation Returns GIF if applicable, no operations occur on image
     * @returns Generated URL or nothing
     */
    createFileURL(options, allowAnimation) {
        var _a, _b;
        const autumn = (_a = __classPrivateFieldGet(this, _File_client, "f").configuration) === null || _a === void 0 ? void 0 : _a.features.autumn;
        if (!(autumn === null || autumn === void 0 ? void 0 : autumn.enabled))
            return;
        // TODO: server-side
        if (((_b = this.metadata) === null || _b === void 0 ? void 0 : _b.type) === "Image") {
            if (Math.min(this.metadata.width, this.metadata.height) <= 0 ||
                (this.contentType === "image/gif" &&
                    Math.max(this.metadata.width, this.metadata.height) >= 4096))
                return;
        }
        let query = "";
        if (options) {
            if (!allowAnimation || this.contentType !== "image/gif") {
                query =
                    "?" +
                        Object.keys(options)
                            .map((k) => `${k}=${options[k]}`)
                            .join("&");
            }
        }
        return `${autumn.url}/${this.tag}/${this.id}${query}`;
    }
}
exports.File = File;
_File_client = new WeakMap();
