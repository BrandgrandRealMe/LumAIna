"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ServerMember_collection;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerMember = void 0;
const calculator_1 = require("../permissions/calculator");
const definitions_1 = require("../permissions/definitions");
/**
 * Deterministic conversion of member composite key to string ID
 * @param key Key
 * @returns String key
 */
function key(key) {
    return key.server + key.user;
}
/**
 * Server Member Class
 */
class ServerMember {
    /**
     * Construct Server Member
     * @param collection Collection
     * @param id Id
     */
    constructor(collection, id) {
        _ServerMember_collection.set(this, void 0);
        __classPrivateFieldSet(this, _ServerMember_collection, collection, "f");
        this.id = id;
    }
    /**
     * Convert to string
     * @returns String
     */
    toString() {
        return `<@${this.id.user}>`;
    }
    /**
     * Server this member belongs to
     */
    get server() {
        return __classPrivateFieldGet(this, _ServerMember_collection, "f").client.servers.get(this.id.server);
    }
    /**
     * User corresponding to this member
     */
    get user() {
        return __classPrivateFieldGet(this, _ServerMember_collection, "f").client.users.get(this.id.user);
    }
    /**
     * When this user joined the server
     */
    get joinedAt() {
        return __classPrivateFieldGet(this, _ServerMember_collection, "f").getUnderlyingObject(key(this.id)).joinedAt;
    }
    /**
     * Nickname
     */
    get nickname() {
        return __classPrivateFieldGet(this, _ServerMember_collection, "f").getUnderlyingObject(key(this.id)).nickname;
    }
    /**
     * Avatar
     */
    get avatar() {
        return __classPrivateFieldGet(this, _ServerMember_collection, "f").getUnderlyingObject(key(this.id)).avatar;
    }
    /**
     * List of role IDs
     */
    get roles() {
        return __classPrivateFieldGet(this, _ServerMember_collection, "f").getUnderlyingObject(key(this.id)).roles;
    }
    /**
     * Time at which timeout expires
     */
    get timeout() {
        return __classPrivateFieldGet(this, _ServerMember_collection, "f").getUnderlyingObject(key(this.id)).timeout;
    }
    /**
     * Ordered list of roles for this member, from lowest to highest priority.
     */
    get orderedRoles() {
        var _a, _b;
        const server = this.server;
        return ((_b = (_a = this.roles) === null || _a === void 0 ? void 0 : _a.map((id) => {
            var _a;
            return (Object.assign({ id }, (_a = server.roles) === null || _a === void 0 ? void 0 : _a.get(id)));
        }).sort((a, b) => b.rank - a.rank)) !== null && _b !== void 0 ? _b : []);
    }
    /**
     * Member's currently hoisted role.
     */
    get hoistedRole() {
        const roles = this.orderedRoles.filter((x) => x.hoist);
        if (roles.length > 0) {
            return roles[roles.length - 1];
        }
        else {
            return null;
        }
    }
    /**
     * Member's current role colour.
     */
    get roleColour() {
        const roles = this.orderedRoles.filter((x) => x.colour);
        if (roles.length > 0) {
            return roles[roles.length - 1].colour;
        }
        else {
            return null;
        }
    }
    /**
     * Member's ranking
     * Smaller values are ranked as higher priority
     */
    get ranking() {
        var _a;
        if (this.id.user === ((_a = this.server) === null || _a === void 0 ? void 0 : _a.ownerId)) {
            return -Infinity;
        }
        const roles = this.orderedRoles;
        if (roles.length > 0) {
            return roles[roles.length - 1].rank;
        }
        else {
            return Infinity;
        }
    }
    /**
     * Get the permissions that this member has against a certain object
     * @param target Target object to check permissions against
     * @returns Permissions that this member has
     */
    getPermissions(target) {
        return (0, calculator_1.calculatePermission)(__classPrivateFieldGet(this, _ServerMember_collection, "f").client, target, {
            member: this,
        });
    }
    /**
     * Check whether a member has a certain permission against a certain object
     * @param target Target object to check permissions against
     * @param permission Permission names to check for
     * @returns Whether the member has this permission
     */
    hasPermission(target, ...permission) {
        return (0, calculator_1.bitwiseAndEq)(this.getPermissions(target), ...permission.map((x) => definitions_1.Permission[x]));
    }
    /**
     * Checks whether the target member has a higher rank than this member.
     * @param target The member to compare against
     * @returns Whether this member is inferior to the target
     */
    inferiorTo(target) {
        return target.ranking < this.ranking;
    }
    /**
     * Username within a server
     */
    get username() {
        var _a, _b;
        return (_a = this.nickname) !== null && _a !== void 0 ? _a : (_b = this.user) === null || _b === void 0 ? void 0 : _b.username;
    }
    /**
     * URL to the member's avatar
     */
    get avatarURL() {
        var _a, _b, _c;
        return ((_b = (_a = this.avatar) === null || _a === void 0 ? void 0 : _a.createFileURL({ max_side: 256 })) !== null && _b !== void 0 ? _b : (_c = this.user) === null || _c === void 0 ? void 0 : _c.avatarURL);
    }
    /**
     * URL to the member's animated avatar
     */
    get animatedAvatarURL() {
        var _a, _b, _c;
        return ((_b = (_a = this.avatar) === null || _a === void 0 ? void 0 : _a.createFileURL({ max_side: 256 }, true)) !== null && _b !== void 0 ? _b : (_c = this.user) === null || _c === void 0 ? void 0 : _c.animatedAvatarURL);
    }
    /**
     * Edit a member
     * @param data Changes
     */
    edit(data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield __classPrivateFieldGet(this, _ServerMember_collection, "f").client.api.patch(`/servers/${this.id.server}/members/${this.id.user}`, data);
        });
    }
    /**
     * Ban this member from the server
     * @param options Ban options
     */
    ban(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            (_a = this.server) === null || _a === void 0 ? void 0 : _a.banUser(this, options);
        });
    }
    /**
     * Kick this member from the server
     */
    kick() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            (_a = this.server) === null || _a === void 0 ? void 0 : _a.kickUser(this);
        });
    }
}
exports.ServerMember = ServerMember;
_ServerMember_collection = new WeakMap();
