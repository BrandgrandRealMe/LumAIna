"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _User_collection;
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const ulid_1 = require("ulid");
const definitions_1 = require("../permissions/definitions");
/**
 * User Class
 */
class User {
    /**
     * Construct User
     * @param collection Collection
     * @param id Id
     */
    constructor(collection, id) {
        _User_collection.set(this, void 0);
        __classPrivateFieldSet(this, _User_collection, collection, "f");
        this.id = id;
    }
    /**
     * Write to string as a user mention
     * @returns Formatted String
     */
    toString() {
        return `<@${this.id}>`;
    }
    /**
     * Time when this user created their account
     */
    get createdAt() {
        return new Date((0, ulid_1.decodeTime)(this.id));
    }
    /**
     * Username
     */
    get username() {
        return __classPrivateFieldGet(this, _User_collection, "f").getUnderlyingObject(this.id).username;
    }
    /**
     * Avatar
     */
    get avatar() {
        return __classPrivateFieldGet(this, _User_collection, "f").getUnderlyingObject(this.id).avatar;
    }
    /**
     * Badges
     */
    get badges() {
        return __classPrivateFieldGet(this, _User_collection, "f").getUnderlyingObject(this.id).badges;
    }
    /**
     * User Status
     */
    get status() {
        return __classPrivateFieldGet(this, _User_collection, "f").getUnderlyingObject(this.id).status;
    }
    /**
     * Relationship with user
     */
    get relationship() {
        return __classPrivateFieldGet(this, _User_collection, "f").getUnderlyingObject(this.id).relationship;
    }
    /**
     * Whether the user is online
     */
    get online() {
        return __classPrivateFieldGet(this, _User_collection, "f").getUnderlyingObject(this.id).online;
    }
    /**
     * Whether the user is privileged
     */
    get privileged() {
        return __classPrivateFieldGet(this, _User_collection, "f").getUnderlyingObject(this.id).privileged;
    }
    /**
     * Flags
     */
    get flags() {
        return __classPrivateFieldGet(this, _User_collection, "f").getUnderlyingObject(this.id).flags;
    }
    /**
     * Bot information
     */
    get bot() {
        return __classPrivateFieldGet(this, _User_collection, "f").getUnderlyingObject(this.id).bot;
    }
    /**
     * URL to the user's default avatar
     */
    get defaultAvatarURL() {
        return `${__classPrivateFieldGet(this, _User_collection, "f").client.options.baseURL}/users/${this.id}/default_avatar`;
    }
    /**
     * URL to the user's avatar
     */
    get avatarURL() {
        var _a, _b;
        return ((_b = (_a = this.avatar) === null || _a === void 0 ? void 0 : _a.createFileURL({ max_side: 256 })) !== null && _b !== void 0 ? _b : this.defaultAvatarURL);
    }
    /**
     * URL to the user's animated avatar
     */
    get animatedAvatarURL() {
        var _a, _b;
        return ((_b = (_a = this.avatar) === null || _a === void 0 ? void 0 : _a.createFileURL({ max_side: 256 }, true)) !== null && _b !== void 0 ? _b : this.defaultAvatarURL);
    }
    /**
     * Presence
     */
    get presence() {
        var _a, _b;
        return this.online ? (_b = (_a = this.status) === null || _a === void 0 ? void 0 : _a.presence) !== null && _b !== void 0 ? _b : "Online" : "Invisible";
    }
    /**
     * Generate status message
     * @param translate Translation function
     * @returns Status message
     */
    statusMessage(translate = (a) => a) {
        var _a, _b;
        return this.online
            ? (_b = (_a = this.status) === null || _a === void 0 ? void 0 : _a.text) !== null && _b !== void 0 ? _b : (this.presence === "Focus" ? translate("Focus") : undefined)
            : undefined;
    }
    /**
     * Permissions against this user
     */
    get permission() {
        var _a;
        let permissions = 0;
        switch (this.relationship) {
            case "Friend":
            case "User":
                return definitions_1.U32_MAX;
            case "Blocked":
            case "BlockedOther":
                return definitions_1.UserPermission.Access;
            case "Incoming":
            case "Outgoing":
                permissions = definitions_1.UserPermission.Access;
        }
        if (__classPrivateFieldGet(this, _User_collection, "f").client.channels.find((channel) => (channel.type === "Group" || channel.type === "DirectMessage") &&
            channel.recipientIds.has(this.id)) ||
            __classPrivateFieldGet(this, _User_collection, "f").client.serverMembers.find((member) => member.id.user === this.id)) {
            if (((_a = __classPrivateFieldGet(this, _User_collection, "f").client.user) === null || _a === void 0 ? void 0 : _a.bot) || this.bot) {
                permissions |= definitions_1.UserPermission.SendMessage;
            }
            permissions |= definitions_1.UserPermission.Access | definitions_1.UserPermission.ViewProfile;
        }
        return permissions;
    }
    /**
     * Edit the user
     * @param data Changes
     */
    edit(data) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield __classPrivateFieldGet(this, _User_collection, "f").client.api.patch(`/users/${this.id === ((_a = __classPrivateFieldGet(this, _User_collection, "f").client.user) === null || _a === void 0 ? void 0 : _a.id) ? "@me" : this.id}`, data);
        });
    }
    /**
     * Change the username of the current user
     * @param username New username
     * @param password Current password
     */
    changeUsername(username, password) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield __classPrivateFieldGet(this, _User_collection, "f").client.api.patch("/users/@me/username", {
                username,
                password,
            });
        });
    }
    /**
     * Open a DM with a user
     * @returns DM Channel
     */
    openDM() {
        return __awaiter(this, void 0, void 0, function* () {
            let dm = [...__classPrivateFieldGet(this, _User_collection, "f").client.channels.values()].find((x) => x.type === "DirectMessage" && x.recipient == this);
            if (dm) {
                if (!dm.active) {
                    __classPrivateFieldGet(this, _User_collection, "f").client.channels.updateUnderlyingObject(dm.id, "active", true);
                }
            }
            else {
                const data = yield __classPrivateFieldGet(this, _User_collection, "f").client.api.get(`/users/${this.id}/dm`);
                dm = __classPrivateFieldGet(this, _User_collection, "f").client.channels.getOrCreate(data._id, data);
            }
            return dm;
        });
    }
    /**
     * Send a friend request to a user
     */
    addFriend() {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield __classPrivateFieldGet(this, _User_collection, "f").client.api.post(`/users/friend`, {
                username: this.username,
            });
            return __classPrivateFieldGet(this, _User_collection, "f").getOrCreate(user._id, user);
        });
    }
    /**
     * Remove a user from the friend list
     */
    removeFriend() {
        return __awaiter(this, void 0, void 0, function* () {
            yield __classPrivateFieldGet(this, _User_collection, "f").client.api.delete(`/users/${this.id}/friend`);
        });
    }
    /**
     * Block a user
     */
    blockUser() {
        return __awaiter(this, void 0, void 0, function* () {
            yield __classPrivateFieldGet(this, _User_collection, "f").client.api.put(`/users/${this.id}/block`);
        });
    }
    /**
     * Unblock a user
     */
    unblockUser() {
        return __awaiter(this, void 0, void 0, function* () {
            yield __classPrivateFieldGet(this, _User_collection, "f").client.api.delete(`/users/${this.id}/block`);
        });
    }
    /**
     * Fetch the profile of a user
     * @returns The profile of the user
     */
    fetchProfile() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield __classPrivateFieldGet(this, _User_collection, "f").client.api.get(`/users/${this.id}/profile`);
        });
    }
    /**
     * Fetch the mutual connections of the current user and a target user
     * @returns The mutual connections of the current user and a target user
     */
    fetchMutual() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield __classPrivateFieldGet(this, _User_collection, "f").client.api.get(`/users/${this.id}/mutual`);
        });
    }
}
exports.User = User;
_User_collection = new WeakMap();
