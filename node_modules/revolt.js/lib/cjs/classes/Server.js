"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Server_collection, _Server_synced;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const solid_js_1 = require("solid-js");
const ulid_1 = require("ulid");
const __1 = require("..");
const hydration_1 = require("../hydration");
const calculator_1 = require("../permissions/calculator");
const definitions_1 = require("../permissions/definitions");
const Invite_1 = require("./Invite");
const ServerBan_1 = require("./ServerBan");
/**
 * Server Class
 */
class Server {
    /**
     * Construct Server
     * @param collection Collection
     * @param id Id
     */
    constructor(collection, id) {
        _Server_collection.set(this, void 0);
        _Server_synced.set(this, void 0);
        __classPrivateFieldSet(this, _Server_collection, collection, "f");
        this.id = id;
    }
    /**
     * Convert to string
     * @returns String
     */
    toString() {
        return `<%${this.id}>`;
    }
    /**
     * Time when this server was created
     */
    get createdAt() {
        return new Date((0, ulid_1.decodeTime)(this.id));
    }
    /**
     * Owner's user ID
     */
    get ownerId() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).ownerId;
    }
    /**
     * Owner
     */
    get owner() {
        return __classPrivateFieldGet(this, _Server_collection, "f").client.users.get(__classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).ownerId);
    }
    /**
     * Name
     */
    get name() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).name;
    }
    /**
     * Description
     */
    get description() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).description;
    }
    /**
     * Icon
     */
    get icon() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).icon;
    }
    /**
     * Banner
     */
    get banner() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).banner;
    }
    /**
     * Channel IDs
     */
    get channelIds() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).channelIds;
    }
    /**
     * Channels
     */
    get channels() {
        return [
            ...__classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).channelIds.values(),
        ]
            .map((id) => __classPrivateFieldGet(this, _Server_collection, "f").client.channels.get(id))
            .filter((x) => x);
    }
    /**
     * Categories
     */
    get categories() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).categories;
    }
    /**
     * System message channels
     */
    get systemMessages() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).systemMessages;
    }
    /**
     * Roles
     */
    get roles() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).roles;
    }
    /**
     * Default permissions
     */
    get defaultPermissions() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).defaultPermissions;
    }
    /**
     * Server flags
     */
    get flags() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).flags;
    }
    /**
     * Whether analytics are enabled for this server
     */
    get analytics() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).analytics;
    }
    /**
     * Whether this server is publicly discoverable
     */
    get discoverable() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).discoverable;
    }
    /**
     * Whether this server is marked as mature
     */
    get mature() {
        return __classPrivateFieldGet(this, _Server_collection, "f").getUnderlyingObject(this.id).nsfw;
    }
    /**
     * Get an array of ordered categories with their respective channels.
     * Uncategorised channels are returned in `id="default"` category.
     */
    get orderedChannels() {
        const uncategorised = new Set(this.channels.map((channel) => channel.id));
        const elements = [];
        let defaultCategory;
        const categories = this.categories;
        if (categories) {
            for (const category of categories) {
                const channels = [];
                for (const key of category.channels) {
                    if (uncategorised.delete(key)) {
                        channels.push(__classPrivateFieldGet(this, _Server_collection, "f").client.channels.get(key));
                    }
                }
                const cat = Object.assign(Object.assign({}, category), { channels });
                if (cat.id === "default") {
                    if (channels.length === 0)
                        continue;
                    defaultCategory = cat;
                }
                elements.push(cat);
            }
        }
        if (uncategorised.size > 0) {
            const channels = [...uncategorised].map((key) => __classPrivateFieldGet(this, _Server_collection, "f").client.channels.get(key));
            if (defaultCategory) {
                defaultCategory.channels = [...defaultCategory.channels, ...channels];
            }
            else {
                elements.unshift({
                    id: "default",
                    title: "Default",
                    channels,
                });
            }
        }
        return elements;
    }
    /**
     * Default channel for this server
     */
    get defaultChannel() {
        var _a;
        return (_a = this.orderedChannels.find((cat) => cat.channels.length)) === null || _a === void 0 ? void 0 : _a.channels[0];
    }
    /**
     * Get an ordered array of roles with their IDs attached.
     * The highest ranking roles will be first followed by lower
     * ranking roles. This is dictated by the "rank" property
     * which is smaller for higher priority roles.
     */
    get orderedRoles() {
        const roles = this.roles;
        return roles
            ? [...roles.entries()]
                .map(([id, role]) => (Object.assign({ id }, role)))
                .sort((a, b) => (a.rank || 0) - (b.rank || 0))
            : [];
    }
    /**
     * Check whether the server is currently unread
     * @returns Whether the server is unread
     */
    get unread() {
        return this.channels.find((channel) => channel.unread);
    }
    /**
     * Find all message IDs of unread messages
     * @returns Array of message IDs which are unread
     */
    get mentions() {
        const arr = this.channels.map((channel) => { var _a, _b; return Array.from((_b = (_a = channel.mentions) === null || _a === void 0 ? void 0 : _a.values()) !== null && _b !== void 0 ? _b : []); });
        return [].concat(...arr);
    }
    /**
     * URL to the server's icon
     */
    get iconURL() {
        var _a;
        return (_a = this.icon) === null || _a === void 0 ? void 0 : _a.createFileURL({ max_side: 256 });
    }
    /**
     * URL to the server's animated icon
     */
    get animatedIconURL() {
        var _a;
        return (_a = this.icon) === null || _a === void 0 ? void 0 : _a.createFileURL({ max_side: 256 }, true);
    }
    /**
     * URL to the server's banner
     */
    get bannerURL() {
        var _a;
        return (_a = this.banner) === null || _a === void 0 ? void 0 : _a.createFileURL({ max_side: 256 }, true);
    }
    /**
     * Own member object for this server
     */
    get member() {
        return __classPrivateFieldGet(this, _Server_collection, "f").client.serverMembers.getByKey({
            server: this.id,
            user: __classPrivateFieldGet(this, _Server_collection, "f").client.user.id,
        });
    }
    /**
     * Permission the currently authenticated user has against this server
     */
    get permission() {
        return (0, calculator_1.calculatePermission)(__classPrivateFieldGet(this, _Server_collection, "f").client, this);
    }
    /**
     * Check whether we have a given permission in a server
     * @param permission Permission Names
     * @returns Whether we have this permission
     */
    havePermission(...permission) {
        return (0, calculator_1.bitwiseAndEq)(this.permission, ...permission.map((x) => definitions_1.Permission[x]));
    }
    /**
     * Check whether we have at least one of the given permissions in a server
     * @param permission Permission Names
     * @returns Whether we have one of the permissions
     */
    orPermission(...permission) {
        return (permission.findIndex((x) => (0, calculator_1.bitwiseAndEq)(this.permission, definitions_1.Permission[x])) !== -1);
    }
    /**
     * Create a channel
     * @param data Channel create route data
     * @returns The newly-created channel
     */
    createChannel(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const channel = yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.post(`/servers/${this.id}/channels`, data);
            return __classPrivateFieldGet(this, _Server_collection, "f").client.channels.getOrCreate(channel._id, channel);
        });
    }
    /**
     * Edit a server
     * @param data Changes
     */
    edit(data) {
        return __awaiter(this, void 0, void 0, function* () {
            __classPrivateFieldGet(this, _Server_collection, "f").updateUnderlyingObject(this.id, (0, hydration_1.hydrate)("server", yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.patch(`/servers/${this.id}`, data), __classPrivateFieldGet(this, _Server_collection, "f").client, false));
        });
    }
    /**
     * Delete or leave a server
     * @param leaveSilently Whether to not send a message on leave
     */
    delete(leaveSilently) {
        return __awaiter(this, void 0, void 0, function* () {
            yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.delete(`/servers/${this.id}`, {
                leave_silently: leaveSilently,
            });
            __classPrivateFieldGet(this, _Server_collection, "f").delete(this.id);
        });
    }
    /**
     * Mark a server as read
     */
    ack() {
        return __awaiter(this, void 0, void 0, function* () {
            yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.put(`/servers/${this.id}/ack`);
        });
    }
    /**
     * Ban user from this server
     * @param user User
     * @param options Ban options
     */
    banUser(user, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = user instanceof __1.User
                ? user.id
                : user instanceof __1.ServerMember
                    ? user.id.user
                    : user;
            const ban = yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.put(`/servers/${this.id}/bans/${userId}`, options);
            return new ServerBan_1.ServerBan(__classPrivateFieldGet(this, _Server_collection, "f").client, ban);
        });
    }
    /**
     * Kick user from this server
     * @param user User
     */
    kickUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = user instanceof __1.User
                ? user.id
                : user instanceof __1.ServerMember
                    ? user.id.user
                    : user;
            return yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.delete(`/servers/${this.id}/members/${userId}`);
        });
    }
    /**
     * Pardon user's ban
     * @param user User
     */
    unbanUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = user instanceof __1.User ? user.id : user;
            return yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.delete(`/servers/${this.id}/bans/${userId}`);
        });
    }
    /**
     * Fetch a server's invites
     * @returns An array of the server's invites
     */
    fetchInvites() {
        return __awaiter(this, void 0, void 0, function* () {
            const invites = yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.get(`/servers/${this.id}/invites`);
            return invites.map((invite) => Invite_1.ChannelInvite.from(__classPrivateFieldGet(this, _Server_collection, "f").client, invite));
        });
    }
    /**
     * Fetch a server's bans
     * @returns An array of the server's bans.
     */
    fetchBans() {
        return __awaiter(this, void 0, void 0, function* () {
            const { users, bans } = yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.get(`/servers/${this.id}/bans`);
            users.forEach((user) => __classPrivateFieldGet(this, _Server_collection, "f").client.users.getOrCreate(user._id, user));
            return bans.map((ban) => new ServerBan_1.ServerBan(__classPrivateFieldGet(this, _Server_collection, "f").client, ban));
        });
    }
    /**
     * Set role permissions
     * @param roleId Role Id, set to 'default' to affect all users
     * @param permissions Permission value
     */
    setPermissions(roleId = "default", permissions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.put(`/servers/${this.id}/permissions/${roleId}`, { permissions: permissions });
        });
    }
    /**
     * Create role
     * @param name Role name
     */
    createRole(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.post(`/servers/${this.id}/roles`, {
                name,
            });
        });
    }
    /**
     * Edit a role
     * @param roleId Role ID
     * @param data Role editing route data
     */
    editRole(roleId, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.patch(`/servers/${this.id}/roles/${roleId}`, data);
        });
    }
    /**
     * Delete role
     * @param roleId Role ID
     */
    deleteRole(roleId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.delete(`/servers/${this.id}/roles/${roleId}`);
        });
    }
    /**
     * Fetch a server member
     * @param user User
     * @returns Server member object
     */
    fetchMember(user) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = typeof user === "string" ? user : user.id;
            const existing = __classPrivateFieldGet(this, _Server_collection, "f").client.serverMembers.getByKey({
                server: this.id,
                user: userId,
            });
            if (existing)
                return existing;
            const member = yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.get(`/servers/${this.id}/members/${userId}`);
            return __classPrivateFieldGet(this, _Server_collection, "f").client.serverMembers.getOrCreate(member._id, member);
        });
    }
    /**
     * Optimised member fetch route
     * @param excludeOffline
     */
    syncMembers(excludeOffline) {
        return __awaiter(this, void 0, void 0, function* () {
            if (__classPrivateFieldGet(this, _Server_synced, "f") && (__classPrivateFieldGet(this, _Server_synced, "f") === "full" || excludeOffline))
                return;
            const data = yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.get(`/servers/${this.id}/members`, { exclude_offline: excludeOffline });
            (0, solid_js_1.batch)(() => {
                if (excludeOffline) {
                    for (let i = 0; i < data.users.length; i++) {
                        const user = data.users[i];
                        if (user.online) {
                            __classPrivateFieldGet(this, _Server_collection, "f").client.users.getOrCreate(user._id, user);
                            __classPrivateFieldGet(this, _Server_collection, "f").client.serverMembers.getOrCreate(data.members[i]._id, data.members[i]);
                        }
                    }
                }
                else {
                    for (let i = 0; i < data.users.length; i++) {
                        __classPrivateFieldGet(this, _Server_collection, "f").client.users.getOrCreate(data.users[i]._id, data.users[i]);
                        __classPrivateFieldGet(this, _Server_collection, "f").client.serverMembers.getOrCreate(data.members[i]._id, data.members[i]);
                    }
                }
            });
        });
    }
    /**
     * Reset member sync status
     */
    resetSyncStatus() {
        __classPrivateFieldSet(this, _Server_synced, undefined, "f");
    }
    /**
     * Fetch a server's members
     * @returns List of the server's members and their user objects
     */
    fetchMembers() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = (yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.get(
            // @ts-expect-error TODO weird typing issue
            `/servers/${this.id}/members`));
            return (0, solid_js_1.batch)(() => ({
                members: data.members.map((member) => __classPrivateFieldGet(this, _Server_collection, "f").client.serverMembers.getOrCreate(member._id, member)),
                users: data.users.map((user) => __classPrivateFieldGet(this, _Server_collection, "f").client.users.getOrCreate(user._id, user)),
            }));
        });
    }
    /**
     * Query members from a server by name
     * @param query Name
     * @returns List of the server's members and their user objects
     */
    queryMembersExperimental(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = (yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.get(`/servers/${this.id}/members_experimental_query?experimental_api=true&query=${encodeURIComponent(query)}`));
            return (0, solid_js_1.batch)(() => ({
                members: data.members.map((member) => __classPrivateFieldGet(this, _Server_collection, "f").client.serverMembers.getOrCreate(member._id, member)),
                users: data.users.map((user) => __classPrivateFieldGet(this, _Server_collection, "f").client.users.getOrCreate(user._id, user)),
            }));
        });
    }
    /**
     * Create an emoji on the server
     * @param autumnId Autumn Id
     * @param options Options
     */
    createEmoji(autumnId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const emoji = yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.put(`/custom/emoji/${autumnId}`, Object.assign({ parent: {
                    type: "Server",
                    id: this.id,
                } }, options));
            return __classPrivateFieldGet(this, _Server_collection, "f").client.emojis.getOrCreate(emoji._id, emoji, true);
        });
    }
    /**
     * Fetch a server's emoji
     * @returns List of server emoji
     */
    fetchEmojis() {
        return __awaiter(this, void 0, void 0, function* () {
            const emojis = yield __classPrivateFieldGet(this, _Server_collection, "f").client.api.get(`/servers/${this.id}/emojis`);
            return (0, solid_js_1.batch)(() => emojis.map((emoji) => __classPrivateFieldGet(this, _Server_collection, "f").client.emojis.getOrCreate(emoji._id, emoji)));
        });
    }
}
exports.Server = Server;
_Server_collection = new WeakMap(), _Server_synced = new WeakMap();
