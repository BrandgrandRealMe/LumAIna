"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Emoji_collection;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Emoji = void 0;
const ulid_1 = require("ulid");
/**
 * Emoji Class
 */
class Emoji {
    /**
     * Construct Emoji
     * @param collection Collection
     * @param id Emoji Id
     */
    constructor(collection, id) {
        _Emoji_collection.set(this, void 0);
        __classPrivateFieldSet(this, _Emoji_collection, collection, "f");
        this.id = id;
    }
    /**
     * Convert to string
     * @returns String
     */
    toString() {
        return `:${this.id}:`;
    }
    /**
     * Time when this emoji was created
     */
    get createdAt() {
        return new Date((0, ulid_1.decodeTime)(this.id));
    }
    /**
     * Information about the parent of this emoji
     */
    get parent() {
        return __classPrivateFieldGet(this, _Emoji_collection, "f").getUnderlyingObject(this.id).parent;
    }
    /**
     * Creator of the emoji
     */
    get creator() {
        return __classPrivateFieldGet(this, _Emoji_collection, "f").client.users.get(__classPrivateFieldGet(this, _Emoji_collection, "f").getUnderlyingObject(this.id).creatorId);
    }
    /**
     * Name
     */
    get name() {
        return __classPrivateFieldGet(this, _Emoji_collection, "f").getUnderlyingObject(this.id).name;
    }
    /**
     * Whether the emoji is animated
     */
    get animated() {
        return __classPrivateFieldGet(this, _Emoji_collection, "f").getUnderlyingObject(this.id).animated;
    }
    /**
     * Whether the emoji is marked as mature
     */
    get mature() {
        return __classPrivateFieldGet(this, _Emoji_collection, "f").getUnderlyingObject(this.id).nsfw;
    }
    /**
     * Delete Emoji
     */
    delete() {
        return __awaiter(this, void 0, void 0, function* () {
            yield __classPrivateFieldGet(this, _Emoji_collection, "f").client.api.delete(`/custom/emoji/${this.id}`);
            const emoji = __classPrivateFieldGet(this, _Emoji_collection, "f").getUnderlyingObject(this.id);
            if (emoji) {
                __classPrivateFieldGet(this, _Emoji_collection, "f").client.emit("emojiDelete", emoji);
                __classPrivateFieldGet(this, _Emoji_collection, "f").delete(this.id);
            }
        });
    }
}
exports.Emoji = Emoji;
_Emoji_collection = new WeakMap();
