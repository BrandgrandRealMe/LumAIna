"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ChannelUnread_collection;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelUnread = void 0;
/**
 * Channel Unread Class
 */
class ChannelUnread {
    /**
     * Construct Channel
     * @param collection Collection
     * @param id Channel Id
     */
    constructor(collection, id) {
        _ChannelUnread_collection.set(this, void 0);
        __classPrivateFieldSet(this, _ChannelUnread_collection, collection, "f");
        this.id = id;
    }
    /**
     * Last read message id
     */
    get lastMessageId() {
        return __classPrivateFieldGet(this, _ChannelUnread_collection, "f").getUnderlyingObject(this.id).lastMessageId;
    }
    /**
     * List of message IDs that we were mentioned in
     */
    get messageMentionIds() {
        return __classPrivateFieldGet(this, _ChannelUnread_collection, "f").getUnderlyingObject(this.id).messageMentionIds;
    }
}
exports.ChannelUnread = ChannelUnread;
_ChannelUnread_collection = new WeakMap();
