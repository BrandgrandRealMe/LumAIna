"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerPublicInvite = exports.UnknownPublicInvite = exports.PublicChannelInvite = void 0;
const solid_js_1 = require("solid-js");
const __1 = require("..");
/**
 * Public Channel Invite
 */
class PublicChannelInvite {
    /**
     * Construct Channel Invite
     * @param client Client
     * @param type Type
     */
    constructor(client, type = "None") {
        this.client = client;
        this.type = type;
    }
    /**
     * Create an Invite from an API Invite Response
     * @param client Client
     * @param invite Data
     * @returns Invite
     */
    static from(client, invite) {
        switch (invite.type) {
            case "Server":
                return new ServerPublicInvite(client, invite);
            default:
                return new UnknownPublicInvite(client);
        }
    }
}
exports.PublicChannelInvite = PublicChannelInvite;
/**
 * Public invite of unknown type
 */
class UnknownPublicInvite extends PublicChannelInvite {
}
exports.UnknownPublicInvite = UnknownPublicInvite;
/**
 * Public Server Invite
 */
class ServerPublicInvite extends PublicChannelInvite {
    /**
     * Construct Server Invite
     * @param client Client
     * @param invite Invite
     */
    constructor(client, invite) {
        var _a;
        super(client, "Server");
        this.code = invite.code;
        this.userName = invite.user_name;
        this.userAvatar = invite.user_avatar
            ? new __1.File(client, invite.user_avatar)
            : undefined;
        this.serverId = invite.server_id;
        this.serverName = invite.server_name;
        this.serverIcon = invite.server_icon
            ? new __1.File(client, invite.server_icon)
            : undefined;
        this.serverBanner = invite.server_banner
            ? new __1.File(client, invite.server_banner)
            : undefined;
        this.serverFlags = (_a = invite.server_flags) !== null && _a !== void 0 ? _a : 0;
        this.memberCount = invite.member_count;
        this.channelId = invite.channel_id;
        this.channelName = invite.channel_name;
        this.channelDescription = invite.channel_description;
    }
    /**
     * Join the server
     */
    join() {
        return __awaiter(this, void 0, void 0, function* () {
            const existingServer = this.client.servers.get(this.serverId);
            if (existingServer)
                return existingServer;
            const { server, channels } = yield this.client.api.post(`/invites/${this.code}`);
            return (0, solid_js_1.batch)(() => {
                for (const channel of channels) {
                    this.client.channels.getOrCreate(channel._id, channel);
                }
                return this.client.servers.getOrCreate(server._id, server, true);
            });
        });
    }
}
exports.ServerPublicInvite = ServerPublicInvite;
