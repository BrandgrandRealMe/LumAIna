"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerInvite = exports.UnknownInvite = exports.ChannelInvite = void 0;
/**
 * Channel Invite
 */
class ChannelInvite {
    /**
     * Construct Channel Invite
     * @param client Client
     * @param type Type
     */
    constructor(client, type = "None") {
        this.client = client;
        this.type = type;
    }
    /**
     * Create an Invite from an API Invite
     * @param client Client
     * @param invite Data
     * @returns Invite
     */
    static from(client, invite) {
        switch (invite.type) {
            case "Server":
                return new ServerInvite(client, invite);
            default:
                return new UnknownInvite(client);
        }
    }
}
exports.ChannelInvite = ChannelInvite;
/**
 * Invite of unknown type
 */
class UnknownInvite extends ChannelInvite {
}
exports.UnknownInvite = UnknownInvite;
/**
 * Server Invite
 */
class ServerInvite extends ChannelInvite {
    /**
     * Construct Server Invite
     * @param client Client
     * @param invite Invite
     */
    constructor(client, invite) {
        super(client, "Server");
        this.id = invite._id;
        this.creatorId = invite.creator;
        this.serverId = invite.server;
        this.channelId = invite.server;
    }
    /**
     * Creator of the invite
     */
    get creator() {
        return this.client.users.get(this.creatorId);
    }
    /**
     * Server this invite points to
     */
    get server() {
        return this.client.servers.get(this.serverId);
    }
    /**
     * Channel this invite points to
     */
    get channel() {
        return this.client.channels.get(this.channelId);
    }
    /**
     * Delete the invite
     */
    delete() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.api.delete(`/invites/${this.id}`);
        });
    }
}
exports.ServerInvite = ServerInvite;
