"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextEmbed = exports.WebsiteEmbed = exports.VideoEmbed = exports.ImageEmbed = exports.UnknownEmbed = exports.MessageEmbed = void 0;
const __1 = require("..");
/**
 * Message Embed
 */
class MessageEmbed {
    /**
     * Construct Embed
     * @param client Client
     * @param type Type
     */
    constructor(client, type = "None") {
        this.client = client;
        this.type = type;
    }
    /**
     * Create an Embed from an API Embed
     * @param client Client
     * @param embed Data
     * @returns Embed
     */
    static from(client, embed) {
        switch (embed.type) {
            case "Image":
                return new ImageEmbed(client, embed);
            case "Video":
                return new VideoEmbed(client, embed);
            case "Website":
                return new WebsiteEmbed(client, embed);
            case "Text":
                return new TextEmbed(client, embed);
            default:
                return new UnknownEmbed(client);
        }
    }
}
exports.MessageEmbed = MessageEmbed;
/**
 * Embed of unknown type
 */
class UnknownEmbed extends MessageEmbed {
}
exports.UnknownEmbed = UnknownEmbed;
/**
 * Image Embed
 */
class ImageEmbed extends MessageEmbed {
    /**
     * Construct Image Embed
     * @param client Client
     * @param embed Embed
     */
    constructor(client, embed) {
        super(client, "Image");
        this.url = embed.url;
        this.width = embed.width;
        this.height = embed.height;
        this.size = embed.size;
    }
    /**
     * Proxied image URL
     */
    get proxiedURL() {
        var _a;
        return (_a = this.client) === null || _a === void 0 ? void 0 : _a.proxyFile(this.url);
    }
}
exports.ImageEmbed = ImageEmbed;
/**
 * Video Embed
 */
class VideoEmbed extends MessageEmbed {
    /**
     * Construct Video Embed
     * @param client Client
     * @param embed Embed
     */
    constructor(client, embed) {
        super(client, "Video");
        this.url = embed.url;
        this.width = embed.width;
        this.height = embed.height;
    }
    /**
     * Proxied video URL
     */
    get proxiedURL() {
        var _a;
        return (_a = this.client) === null || _a === void 0 ? void 0 : _a.proxyFile(this.url);
    }
}
exports.VideoEmbed = VideoEmbed;
/**
 * Website Embed
 */
class WebsiteEmbed extends MessageEmbed {
    /**
     * Construct Video Embed
     * @param client Client
     * @param embed Embed
     */
    constructor(client, embed) {
        super(client, "Website");
        this.url = embed.url;
        this.originalUrl = embed.original_url;
        this.specialContent = embed.special;
        this.title = embed.title;
        this.description = embed.description;
        this.image = embed.image ? new ImageEmbed(client, embed.image) : undefined;
        this.video = embed.video ? new VideoEmbed(client, embed.video) : undefined;
        this.siteName = embed.site_name;
        this.iconUrl = embed.icon_url;
        this.colour = embed.colour;
    }
    /**
     * Proxied icon URL
     */
    get proxiedIconURL() {
        var _a;
        return this.iconUrl ? (_a = this.client) === null || _a === void 0 ? void 0 : _a.proxyFile(this.iconUrl) : undefined;
    }
    /**
     * If special content is present, generate the embed URL
     */
    get embedURL() {
        var _a, _b, _c;
        switch ((_a = this.specialContent) === null || _a === void 0 ? void 0 : _a.type) {
            case "YouTube": {
                let timestamp = "";
                if (this.specialContent.timestamp) {
                    timestamp = `&start=${this.specialContent.timestamp}`;
                }
                return `https://www.youtube-nocookie.com/embed/${this.specialContent.id}?modestbranding=1${timestamp}`;
            }
            case "Twitch":
                return `https://player.twitch.tv/?${this.specialContent.content_type.toLowerCase()}=${this.specialContent.id}&parent=${(_c = (_b = (window !== null && window !== void 0 ? window : {})) === null || _b === void 0 ? void 0 : _b.location) === null || _c === void 0 ? void 0 : _c.hostname}&autoplay=false`;
            case "Lightspeed":
                return `https://new.lightspeed.tv/embed/${this.specialContent.id}/stream`;
            case "Spotify":
                return `https://open.spotify.com/embed/${this.specialContent.content_type}/${this.specialContent.id}`;
            case "Soundcloud":
                return `https://w.soundcloud.com/player/?url=${encodeURIComponent(this.url)}&color=%23FF7F50&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true`;
            case "Bandcamp": {
                return `https://bandcamp.com/EmbeddedPlayer/${this.specialContent.content_type.toLowerCase()}=${this.specialContent.id}/size=large/bgcol=181a1b/linkcol=056cc4/tracklist=false/transparent=true/`;
            }
            case "Streamable": {
                return `https://streamable.com/e/${this.specialContent.id}?loop=0`;
            }
        }
    }
}
exports.WebsiteEmbed = WebsiteEmbed;
/**
 * Text Embed
 */
class TextEmbed extends MessageEmbed {
    /**
     * Construct Video Embed
     * @param client Client
     * @param embed Embed
     */
    constructor(client, embed) {
        super(client, "Text");
        this.iconUrl = embed.icon_url;
        this.url = embed.url;
        this.title = embed.title;
        this.description = embed.description;
        this.media = embed.media ? new __1.File(client, embed.media) : undefined;
        this.colour = embed.colour;
    }
    /**
     * Proxied icon URL
     */
    get proxiedIconURL() {
        var _a;
        return this.iconUrl ? (_a = this.client) === null || _a === void 0 ? void 0 : _a.proxyFile(this.iconUrl) : undefined;
    }
}
exports.TextEmbed = TextEmbed;
