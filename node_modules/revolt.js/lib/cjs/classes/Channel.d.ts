import type { DataEditChannel, DataMessageSend, OptionsMessageSearch, Override } from "revolt-api";
import { APIRoutes } from "revolt-api/dist/routes";
import { Message } from "..";
import { ChannelCollection } from "../collections";
import { Permission } from "../permissions/definitions";
/**
 * Channel Class
 */
export declare class Channel {
    #private;
    readonly id: string;
    /**
     * Construct Channel
     * @param collection Collection
     * @param id Channel Id
     */
    constructor(collection: ChannelCollection, id: string);
    /**
     * Write to string as a channel mention
     * @returns Formatted String
     */
    toString(): string;
    /**
     * Time when this server was created
     */
    get createdAt(): Date;
    /**
     * Channel type
     */
    get type(): "SavedMessages" | "DirectMessage" | "Group" | "TextChannel" | "VoiceChannel";
    /**
     * Absolute pathname to this channel in the client
     */
    get path(): string;
    /**
     * URL to this channel
     */
    get url(): string;
    /**
     * Channel name
     */
    get name(): string;
    /**
     * Display name
     */
    get displayName(): string | undefined;
    /**
     * Channel description
     */
    get description(): string | undefined;
    /**
     * Channel icon
     */
    get icon(): import("./File").File | undefined;
    /**
     * Whether the conversation is active
     */
    get active(): boolean;
    /**
     * User ids of people currently typing in channel
     */
    get typingIds(): import("@solid-primitives/set").ReactiveSet<string>;
    /**
     * Users currently trying in channel
     */
    get typing(): import("./User").User[];
    /**
     * User ids of recipients of the group
     */
    get recipientIds(): import("@solid-primitives/set").ReactiveSet<string>;
    /**
     * Recipients of the group
     */
    get recipients(): import("./User").User[];
    /**
     * Find recipient of this DM
     */
    get recipient(): import("./User").User | undefined;
    /**
     * User ID
     */
    get userId(): string;
    /**
     * User this channel belongs to
     */
    get user(): import("./User").User | undefined;
    /**
     * Owner ID
     */
    get ownerId(): string;
    /**
     * Owner of the group
     */
    get owner(): import("./User").User | undefined;
    /**
     * Server ID
     */
    get serverId(): string;
    /**
     * Server this channel is in
     */
    get server(): import("./Server").Server | undefined;
    /**
     * Permissions allowed for users in this group
     */
    get permissions(): number | undefined;
    /**
     * Default permissions for this server channel
     */
    get defaultPermissions(): {
        a: number;
        d: number;
    } | undefined;
    /**
     * Role permissions for this server channel
     */
    get rolePermissions(): Record<string, {
        a: number;
        d: number;
    }> | undefined;
    /**
     * Whether this channel is marked as mature
     */
    get mature(): boolean;
    /**
     * ID of the last message sent in this channel
     */
    get lastMessageId(): string | undefined;
    /**
     * Last message sent in this channel
     */
    get lastMessage(): Message | undefined;
    /**
     * Time when the last message was sent
     */
    get lastMessageAt(): Date | undefined;
    /**
     * Time when the channel was last updated (either created or a message was sent)
     */
    get updatedAt(): Date;
    /**
     * Get whether this channel is unread.
     */
    get unread(): boolean;
    /**
     * Get mentions in this channel for user.
     */
    get mentions(): import("@solid-primitives/set").ReactiveSet<string> | undefined;
    /**
     * URL to the channel icon
     */
    get iconURL(): string | undefined;
    /**
     * URL to a small variant of the channel icon
     */
    get smallIconURL(): string | undefined;
    /**
     * URL to the animated channel icon
     */
    get animatedIconURL(): string | undefined;
    /**
     * Whether this channel may be hidden to some users
     */
    get potentiallyRestrictedChannel(): string | boolean | undefined;
    /**
     * Permission the currently authenticated user has against this channel
     */
    get permission(): number;
    /**
     * Check whether we have a given permission in a channel
     * @param permission Permission Names
     * @returns Whether we have this permission
     */
    havePermission(...permission: (keyof typeof Permission)[]): boolean;
    /**
     * Check whether we have at least one of the given permissions in a channel
     * @param permission Permission Names
     * @returns Whether we have one of the permissions
     */
    orPermission(...permission: (keyof typeof Permission)[]): boolean;
    /**
     * Fetch a channel's members.
     * @requires `Group`
     * @returns An array of the channel's members.
     */
    fetchMembers(): Promise<import("./User").User[]>;
    /**
     * Fetch a channel's webhooks
     * @requires `TextChannel`, `Group`
     * @returns Webhooks
     */
    fetchWebhooks(): Promise<import("./ChannelWebhook").ChannelWebhook[]>;
    /**
     * Edit a channel
     * @param data Changes
     */
    edit(data: DataEditChannel): Promise<void>;
    /**
     * Delete or leave a channel
     * @param leaveSilently Whether to not send a message on leave
     * @requires `DirectMessage`, `Group`, `TextChannel`, `VoiceChannel`
     */
    delete(leaveSilently?: boolean): Promise<void>;
    /**
     * Add a user to a group
     * @param user_id ID of the target user
     * @requires `Group`
     */
    addMember(user_id: string): Promise<undefined>;
    /**
     * Remove a user from a group
     * @param user_id ID of the target user
     * @requires `Group`
     */
    removeMember(user_id: string): Promise<undefined>;
    /**
     * Send a message
     * @param data Either the message as a string or message sending route data
     * @requires `SavedMessages`, `DirectMessage`, `Group`, `TextChannel`
     * @returns Sent message
     */
    sendMessage(data: string | DataMessageSend, idempotencyKey?: string): Promise<Message>;
    /**
     * Fetch a message by its ID
     * @param messageId ID of the target message
     * @requires `SavedMessages`, `DirectMessage`, `Group`, `TextChannel`
     * @returns Message
     */
    fetchMessage(messageId: string): Promise<Message>;
    /**
     * Fetch multiple messages from a channel
     * @param params Message fetching route data
     * @requires `SavedMessages`, `DirectMessage`, `Group`, `TextChannel`
     * @returns Messages
     */
    fetchMessages(params?: Omit<(APIRoutes & {
        method: "get";
        path: "/channels/{target}/messages";
    })["params"], "include_users">): Promise<Message[]>;
    /**
     * Fetch multiple messages from a channel including the users that sent them
     * @param params Message fetching route data
     * @requires `SavedMessages`, `DirectMessage`, `Group`, `TextChannel`
     * @returns Object including messages and users
     */
    fetchMessagesWithUsers(params?: Omit<(APIRoutes & {
        method: "get";
        path: "/channels/{target}/messages";
    })["params"], "include_users">): Promise<{
        messages: Message[];
        users: import("./User").User[];
        members: import("./ServerMember").ServerMember[] | undefined;
    }>;
    /**
     * Search for messages
     * @param params Message searching route data
     * @requires `SavedMessages`, `DirectMessage`, `Group`, `TextChannel`
     * @returns Messages
     */
    search(params: Omit<OptionsMessageSearch, "include_users">): Promise<Message[]>;
    /**
     * Search for messages including the users that sent them
     * @param params Message searching route data
     * @requires `SavedMessages`, `DirectMessage`, `Group`, `TextChannel`
     * @returns Object including messages and users
     */
    searchWithUsers(params: Omit<OptionsMessageSearch, "include_users">): Promise<{
        messages: Message[];
        users: import("./User").User[];
        members: import("./ServerMember").ServerMember[] | undefined;
    }>;
    /**
     * Delete many messages by their IDs
     * @param ids List of message IDs
     * @requires `SavedMessages`, `DirectMessage`, `Group`, `TextChannel`
     */
    deleteMessages(ids: string[]): Promise<void>;
    /**
     * Create an invite to the channel
     * @requires `TextChannel`, `VoiceChannel`
     * @returns Newly created invite code
     */
    createInvite(): Promise<{
        type: "Server";
        _id: string;
        server: string;
        creator: string;
        channel: string;
    } | {
        type: "Group";
        _id: string;
        creator: string;
        channel: string;
    }>;
    /**
     * Mark a channel as read
     * @param message Last read message or its ID
     * @param skipRateLimiter Whether to skip the internal rate limiter
     * @requires `SavedMessages`, `DirectMessage`, `Group`, `TextChannel`
     */
    ack(message?: Message | string, skipRateLimiter?: boolean): Promise<void>;
    /**
     * Set role permissions
     * @param role_id Role Id, set to 'default' to affect all users
     * @param permissions Permission value
     * @requires `Group`, `TextChannel`, `VoiceChannel`
     */
    setPermissions(role_id: string | undefined, permissions: Override): Promise<{
        _id: string;
        owner: string;
        name: string;
        description?: string | null | undefined;
        channels: string[];
        categories?: {
            id: string;
            title: string;
            channels: string[];
        }[] | null | undefined;
        system_messages?: {
            user_joined?: string | null | undefined;
            user_left?: string | null | undefined;
            user_kicked?: string | null | undefined;
            user_banned?: string | null | undefined;
        } | null | undefined;
        roles?: {
            [key: string]: {
                name: string;
                permissions: {
                    a: number;
                    d: number;
                };
                colour?: string | null | undefined;
                hoist?: boolean | undefined;
                rank?: number | undefined;
            };
        } | undefined;
        default_permissions: number;
        icon?: {
            _id: string;
            tag: string;
            filename: string;
            metadata: {
                type: "File";
            } | {
                type: "Text";
            } | {
                type: "Image";
                width: number;
                height: number;
            } | {
                type: "Video";
                width: number;
                height: number;
            } | {
                type: "Audio";
            };
            content_type: string;
            size: number;
            deleted?: boolean | null | undefined;
            reported?: boolean | null | undefined;
            message_id?: string | null | undefined;
            user_id?: string | null | undefined;
            server_id?: string | null | undefined;
            object_id?: string | null | undefined;
        } | null | undefined;
        banner?: {
            _id: string;
            tag: string;
            filename: string;
            metadata: {
                type: "File";
            } | {
                type: "Text";
            } | {
                type: "Image";
                width: number;
                height: number;
            } | {
                type: "Video";
                width: number;
                height: number;
            } | {
                type: "Audio";
            };
            content_type: string;
            size: number;
            deleted?: boolean | null | undefined;
            reported?: boolean | null | undefined;
            message_id?: string | null | undefined;
            user_id?: string | null | undefined;
            server_id?: string | null | undefined;
            object_id?: string | null | undefined;
        } | null | undefined;
        flags?: number | null | undefined;
        nsfw?: boolean | undefined;
        analytics?: boolean | undefined;
        discoverable?: boolean | undefined;
    }>;
    /**
     * Start typing in this channel
     * @requires `DirectMessage`, `Group`, `TextChannel`
     */
    startTyping(): void;
    /**
     * Stop typing in this channel
     * @requires `DirectMessage`, `Group`, `TextChannel`
     */
    stopTyping(): void;
}
//# sourceMappingURL=Channel.d.ts.map