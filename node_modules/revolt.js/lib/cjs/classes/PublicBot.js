"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PublicBot_client;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicBot = void 0;
const __1 = require("..");
/**
 * Public Bot Class
 */
class PublicBot {
    /**
     * Construct Public Bot
     * @param client Client
     * @param data Data
     */
    constructor(client, data) {
        _PublicBot_client.set(this, void 0);
        __classPrivateFieldSet(this, _PublicBot_client, client, "f");
        this.id = data._id;
        this.username = data.username;
        this.avatar = data.avatar
            ? new __1.File(client, {
                _id: data.avatar,
                tag: "avatars",
            })
            : undefined;
        this.description = data.description;
    }
    /**
     * Add the bot to a server
     * @param server Server
     */
    addToServer(server) {
        __classPrivateFieldGet(this, _PublicBot_client, "f").api.post(`/bots/${this.id}/invite`, {
            server: server instanceof __1.Server ? server.id : server,
        });
    }
    /**
     * Add the bot to a group
     * @param group Group
     */
    addToGroup(group) {
        // TODO: should use GroupChannel once that is added
        __classPrivateFieldGet(this, _PublicBot_client, "f").api.post(`/bots/${this.id}/invite`, {
            group: group instanceof __1.Channel ? group.id : group,
        });
    }
}
exports.PublicBot = PublicBot;
_PublicBot_client = new WeakMap();
