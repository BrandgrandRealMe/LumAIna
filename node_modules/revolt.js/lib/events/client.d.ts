/// <reference types="node" />
import EventEmitter from "events";
import type TypedEmitter from "typed-emitter";
import type { AvailableProtocols, EventProtocol } from ".";
/**
 * All possible event client states.
 */
export declare enum ConnectionState {
    Idle = 0,
    Connecting = 1,
    Connected = 2,
    Disconnected = 3
}
/**
 * Events provided by the client.
 */
type Events<T extends AvailableProtocols, P extends EventProtocol<T>> = {
    error: (error: Error) => void;
    event: (event: P["server"]) => void;
    state: (state: ConnectionState) => void;
};
/**
 * Simple wrapper around the Revolt websocket service.
 */
declare class Client<T extends AvailableProtocols, P extends EventProtocol<T>> extends EventEmitter {
    #private;
    /**
     * Create a new event client.
     * @param protocolVersion Target protocol version
     * @param transportFormat Communication format
     * @param heartbeatInterval Interval in seconds to send ping
     * @param pongTimeout Time in seconds until heartbeat times out
     */
    constructor(protocolVersion: T, transportFormat?: "json", heartbeatInterval?: number, pongTimeout?: number);
    /**
     * Set the current state
     * @param state state
     */
    private setState;
    /**
     * Connect to the websocket service.
     * @param uri WebSocket URI
     * @param token Authentication token
     */
    connect(uri: string, token: string): void;
    /**
     * Disconnect the websocket client.
     */
    disconnect(): void;
    /**
     * Send an event to the server.
     * @param event Event
     */
    send(event: P["client"]): void;
    /**
     * Handle events intended for client before passing them along.
     * @param event Event
     */
    handle(event: P["server"]): void;
}
/**
 * Event client
 */
export type EventClient<T extends AvailableProtocols> = Omit<Client<T, EventProtocol<T>>, "on" | "once"> & TypedEmitter<Events<T, EventProtocol<T>>>;
/**
 * Create a new event client.
 * @param protocolVersion Target protocol version
 * @param transportFormat Communication format
 * @param heartbeatInterval Interval in seconds to send ping
 * @param pongTimeout Time in seconds until heartbeat times out
 */
export declare function createEventClient<T extends AvailableProtocols, P extends EventProtocol<T>>(protocolVersion: T, transportFormat?: "json", heartbeatInterval?: number, pongTimeout?: number): EventClient<T>;
export {};
//# sourceMappingURL=client.d.ts.map