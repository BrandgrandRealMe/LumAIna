"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ulid_1 = require("ulid");
const ObjectStorage_1 = require("../storage/ObjectStorage");
exports.default = (client) => { var _a, _User_storage, _User_objects; return _a = 
/**
 * User Class
 */
class User {
        /**
         * Get an existing User
         * @param id User ID
         * @returns User
         */
        static get(id) {
            return __classPrivateFieldGet(User, _a, "f", _User_objects)[id];
        }
        /**
         * Fetch user by ID
         * @param id ID
         * @returns User
         */
        static fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const user = User.get(id);
                if (user)
                    return user;
                const data = yield client.api.get(`/users/${id}`);
                return new User(id, data);
            });
        }
        /**
         * Construct User
         * @param id User Id
         */
        constructor(id, data) {
            __classPrivateFieldGet(User, _a, "f", _User_storage).hydrate(id, "user", data);
            __classPrivateFieldGet(User, _a, "f", _User_objects)[id] = this;
            this.id = id;
        }
        /**
         * Time when this user created their account
         */
        get createdAt() {
            return new Date((0, ulid_1.decodeTime)(this.id));
        }
        /**
         * Username
         */
        get username() {
            return __classPrivateFieldGet(User, _a, "f", _User_storage).get(this.id).username;
        }
        /**
         * Avatar
         */
        get avatar() {
            return __classPrivateFieldGet(User, _a, "f", _User_storage).get(this.id).avatar;
        }
        /**
         * Badges
         */
        get badges() {
            return __classPrivateFieldGet(User, _a, "f", _User_storage).get(this.id).badges;
        }
        /**
         * User Status
         */
        get status() {
            return __classPrivateFieldGet(User, _a, "f", _User_storage).get(this.id).status;
        }
        /**
         * Relationship with user
         */
        get relationship() {
            return __classPrivateFieldGet(User, _a, "f", _User_storage).get(this.id).relationship;
        }
        /**
         * Whether the user is online
         */
        get online() {
            return __classPrivateFieldGet(User, _a, "f", _User_storage).get(this.id).online;
        }
        /**
         * Whether the user is privileged
         */
        get privileged() {
            return __classPrivateFieldGet(User, _a, "f", _User_storage).get(this.id).privileged;
        }
        /**
         * Flags
         */
        get flags() {
            return __classPrivateFieldGet(User, _a, "f", _User_storage).get(this.id).flags;
        }
        /**
         * Bot information
         */
        get bot() {
            return __classPrivateFieldGet(User, _a, "f", _User_storage).get(this.id).bot;
        }
    },
    _User_storage = { value: new ObjectStorage_1.ObjectStorage() },
    _User_objects = { value: {} },
    _a; };
