import type { Emoji as ApiEmoji } from "revolt-api";
import { Client } from "../Client";
import { HydratedEmoji } from "../hydration/emoji";
import { ObjectStorage } from "../storage/ObjectStorage";
declare const _default: (client: Client) => {
    new (id: string, data?: ApiEmoji): {
        readonly id: string;
        /**
         * Time when this emoji was created
         */
        readonly createdAt: Date;
        /**
         * Information about the parent of this emoji
         */
        readonly parent: {
            type: "Server";
            id: string;
        } | {
            type: "Detached";
        };
        /**
         * Creator of the emoji
         */
        readonly creator: {
            readonly id: string;
            readonly createdAt: Date;
            readonly username: string;
            readonly avatar: {
                _id: string;
                tag: string;
                filename: string;
                metadata: {
                    type: "File";
                } | {
                    type: "Text";
                } | {
                    type: "Image";
                    width: number;
                    height: number;
                } | {
                    type: "Video";
                    width: number;
                    height: number;
                } | {
                    type: "Audio";
                };
                content_type: string;
                size: number;
                deleted?: boolean | null | undefined;
                reported?: boolean | null | undefined;
                message_id?: string | null | undefined;
                user_id?: string | null | undefined;
                server_id?: string | null | undefined;
                object_id?: string | null | undefined;
            } | undefined;
            readonly badges: import("../hydration/user").UserBadges;
            readonly status: {
                text?: string | null | undefined;
                presence?: "Online" | "Idle" | "Focus" | "Busy" | "Invisible" | null | undefined;
            } | undefined;
            readonly relationship: "None" | "User" | "Friend" | "Outgoing" | "Incoming" | "Blocked" | "BlockedOther";
            readonly online: boolean;
            readonly privileged: boolean;
            readonly flags: import("../hydration/user").UserFlags;
            readonly bot: {
                owner: string;
            } | undefined;
        } | undefined;
        /**
         * Name
         */
        readonly name: string;
        /**
         * Whether the emoji is animated
         */
        readonly animated: boolean;
        /**
         * Whether the emoji is marked as mature
         */
        readonly mature: boolean;
    };
    "__#6@#storage": ObjectStorage<HydratedEmoji>;
    "__#6@#objects": Record<string, {
        readonly id: string;
        /**
         * Time when this emoji was created
         */
        readonly createdAt: Date;
        /**
         * Information about the parent of this emoji
         */
        readonly parent: {
            type: "Server";
            id: string;
        } | {
            type: "Detached";
        };
        /**
         * Creator of the emoji
         */
        readonly creator: {
            readonly id: string;
            readonly createdAt: Date;
            readonly username: string;
            readonly avatar: {
                _id: string;
                tag: string;
                filename: string;
                metadata: {
                    type: "File";
                } | {
                    type: "Text";
                } | {
                    type: "Image";
                    width: number;
                    height: number;
                } | {
                    type: "Video";
                    width: number;
                    height: number;
                } | {
                    type: "Audio";
                };
                content_type: string;
                size: number;
                deleted?: boolean | null | undefined;
                reported?: boolean | null | undefined;
                message_id?: string | null | undefined;
                user_id?: string | null | undefined;
                server_id?: string | null | undefined;
                object_id?: string | null | undefined;
            } | undefined;
            readonly badges: import("../hydration/user").UserBadges;
            readonly status: {
                text?: string | null | undefined;
                presence?: "Online" | "Idle" | "Focus" | "Busy" | "Invisible" | null | undefined;
            } | undefined;
            readonly relationship: "None" | "User" | "Friend" | "Outgoing" | "Incoming" | "Blocked" | "BlockedOther";
            readonly online: boolean;
            readonly privileged: boolean;
            readonly flags: import("../hydration/user").UserFlags;
            readonly bot: {
                owner: string;
            } | undefined;
        } | undefined;
        /**
         * Name
         */
        readonly name: string;
        /**
         * Whether the emoji is animated
         */
        readonly animated: boolean;
        /**
         * Whether the emoji is marked as mature
         */
        readonly mature: boolean;
    }>;
    /**
     * Get an existing Emoji
     * @param id Emoji ID
     * @returns Emoji
     */
    get(id: string): {
        readonly id: string;
        /**
         * Time when this emoji was created
         */
        readonly createdAt: Date;
        /**
         * Information about the parent of this emoji
         */
        readonly parent: {
            type: "Server";
            id: string;
        } | {
            type: "Detached";
        };
        /**
         * Creator of the emoji
         */
        readonly creator: {
            readonly id: string;
            readonly createdAt: Date;
            readonly username: string;
            readonly avatar: {
                _id: string;
                tag: string;
                filename: string;
                metadata: {
                    type: "File";
                } | {
                    type: "Text";
                } | {
                    type: "Image";
                    width: number;
                    height: number;
                } | {
                    type: "Video";
                    width: number;
                    height: number;
                } | {
                    type: "Audio";
                };
                content_type: string;
                size: number;
                deleted?: boolean | null | undefined;
                reported?: boolean | null | undefined;
                message_id?: string | null | undefined;
                user_id?: string | null | undefined;
                server_id?: string | null | undefined;
                object_id?: string | null | undefined;
            } | undefined;
            readonly badges: import("../hydration/user").UserBadges;
            readonly status: {
                text?: string | null | undefined;
                presence?: "Online" | "Idle" | "Focus" | "Busy" | "Invisible" | null | undefined;
            } | undefined;
            readonly relationship: "None" | "User" | "Friend" | "Outgoing" | "Incoming" | "Blocked" | "BlockedOther";
            readonly online: boolean;
            readonly privileged: boolean;
            readonly flags: import("../hydration/user").UserFlags;
            readonly bot: {
                owner: string;
            } | undefined;
        } | undefined;
        /**
         * Name
         */
        readonly name: string;
        /**
         * Whether the emoji is animated
         */
        readonly animated: boolean;
        /**
         * Whether the emoji is marked as mature
         */
        readonly mature: boolean;
    } | undefined;
    /**
     * Fetch emoji by ID
     * @param id ID
     * @returns Emoji
     */
    fetch(id: string): Promise<{
        readonly id: string;
        /**
         * Time when this emoji was created
         */
        readonly createdAt: Date;
        /**
         * Information about the parent of this emoji
         */
        readonly parent: {
            type: "Server";
            id: string;
        } | {
            type: "Detached";
        };
        /**
         * Creator of the emoji
         */
        readonly creator: {
            readonly id: string;
            readonly createdAt: Date;
            readonly username: string;
            readonly avatar: {
                _id: string;
                tag: string;
                filename: string;
                metadata: {
                    type: "File";
                } | {
                    type: "Text";
                } | {
                    type: "Image";
                    width: number;
                    height: number;
                } | {
                    type: "Video";
                    width: number;
                    height: number;
                } | {
                    type: "Audio";
                };
                content_type: string;
                size: number;
                deleted?: boolean | null | undefined;
                reported?: boolean | null | undefined;
                message_id?: string | null | undefined;
                user_id?: string | null | undefined;
                server_id?: string | null | undefined;
                object_id?: string | null | undefined;
            } | undefined;
            readonly badges: import("../hydration/user").UserBadges;
            readonly status: {
                text?: string | null | undefined;
                presence?: "Online" | "Idle" | "Focus" | "Busy" | "Invisible" | null | undefined;
            } | undefined;
            readonly relationship: "None" | "User" | "Friend" | "Outgoing" | "Incoming" | "Blocked" | "BlockedOther";
            readonly online: boolean;
            readonly privileged: boolean;
            readonly flags: import("../hydration/user").UserFlags;
            readonly bot: {
                owner: string;
            } | undefined;
        } | undefined;
        /**
         * Name
         */
        readonly name: string;
        /**
         * Whether the emoji is animated
         */
        readonly animated: boolean;
        /**
         * Whether the emoji is marked as mature
         */
        readonly mature: boolean;
    } | undefined>;
};
export default _default;
//# sourceMappingURL=Emoji.d.ts.map