"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ulid_1 = require("ulid");
const ObjectStorage_1 = require("../storage/ObjectStorage");
exports.default = (client) => { var _a, _Channel_storage, _Channel_objects; return _a = 
/**
 * Channel Class
 */
class Channel {
        /**
         * Get an existing Channel
         * @param id Channel ID
         * @returns Channel
         */
        static get(id) {
            return __classPrivateFieldGet(Channel, _a, "f", _Channel_objects)[id];
        }
        /**
         * Fetch channel by ID
         * @param id ID
         * @returns Channel
         */
        static fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const channel = Channel.get(id);
                if (channel)
                    return channel;
                const data = yield client.api.get(`/channels/${id}`);
                return new Channel(id, data);
            });
        }
        /**
         * Construct Channel
         * @param id Channel Id
         */
        constructor(id, data) {
            __classPrivateFieldGet(Channel, _a, "f", _Channel_storage).hydrate(id, "channel", data);
            __classPrivateFieldGet(Channel, _a, "f", _Channel_objects)[id] = this;
            this.id = id;
        }
        /**
         * Time when this server was created
         */
        get createdAt() {
            return new Date((0, ulid_1.decodeTime)(this.id));
        }
        /**
         * Channel type
         */
        get type() {
            return __classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).channelType;
        }
        /**
         * Channel name
         */
        get name() {
            return __classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).name;
        }
        /**
         * Channel description
         */
        get description() {
            return __classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).description;
        }
        /**
         * Channel icon
         */
        get icon() {
            return __classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).icon;
        }
        /**
         * Whether the conversation is active
         */
        get active() {
            return __classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).active;
        }
        /**
         * Recipients of the group
         */
        get recipients() {
            return __classPrivateFieldGet(Channel, _a, "f", _Channel_storage)
                .get(this.id)
                .recipientIds.map((id) => client.users.get(id));
        }
        /**
         * User this channel belongs to
         */
        get user() {
            return client.users.get(__classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).userId);
        }
        /**
         * Owner of the group
         */
        get owner() {
            return client.users.get(__classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).ownerId);
        }
        /**
         * Server this channel is in
         */
        get server() {
            return client.users.get(__classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).serverId);
        }
        /**
         * Permissions allowed for users in this group
         */
        get permissions() {
            return __classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).permissions;
        }
        /**
         * Default permissions for this server channel
         */
        get defaultPermissions() {
            return __classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).defaultPermissions;
        }
        /**
         * Role permissions for this server channel
         */
        get rolePermissions() {
            return __classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).rolePermissions;
        }
        /**
         * Whether this channel is marked as mature
         */
        get mature() {
            return __classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).nsfw;
        }
        /**
         * ID of the last message sent in this channel
         */
        get lastMessageId() {
            return __classPrivateFieldGet(Channel, _a, "f", _Channel_storage).get(this.id).lastMessageId;
        }
    },
    _Channel_storage = { value: new ObjectStorage_1.ObjectStorage() },
    _Channel_objects = { value: {} },
    _a; };
