"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObjectStorage_1 = require("../storage/ObjectStorage");
/**
 * Deterministic conversion of member composite key to string ID
 * @param key Key
 * @returns String key
 */
function key(key) {
    return key.server + key.user;
}
exports.default = (client) => { var _a, _ServerMember_storage, _ServerMember_objects; return _a = 
/**
 * Server Member Class
 */
class ServerMember {
        /**
         * Get an existing Member
         * @param id Member ID
         * @returns Member
         */
        static get(id) {
            return __classPrivateFieldGet(ServerMember, _a, "f", _ServerMember_objects)[key(id)];
        }
        /**
         * Fetch member by ID
         * @param id Member ID
         * @returns Member
         */
        static fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const channel = ServerMember.get(id);
                if (channel)
                    return channel;
                const data = yield client.api.get(`/servers/${id.server}/members/${id.user}`);
                return new ServerMember(id, data);
            });
        }
        /**
         * Construct Member
         * @param id Member ID
         */
        constructor(id, data) {
            __classPrivateFieldGet(ServerMember, _a, "f", _ServerMember_storage).hydrate(key(id), "serverMember", data);
            __classPrivateFieldGet(ServerMember, _a, "f", _ServerMember_objects)[key(id)] = this;
            this.id = id;
        }
        /**
         * Server this member belongs to
         */
        get server() {
            return client.servers.get(this.id.server);
        }
        /**
         * User corresponding to this member
         */
        get user() {
            return client.users.get(this.id.user);
        }
        /**
         * When this user joined the server
         */
        get joinedAt() {
            return __classPrivateFieldGet(ServerMember, _a, "f", _ServerMember_storage).get(key(this.id)).joinedAt;
        }
        /**
         * Nickname
         */
        get nickname() {
            return __classPrivateFieldGet(ServerMember, _a, "f", _ServerMember_storage).get(key(this.id)).nickname;
        }
        /**
         * Avatar
         */
        get avatar() {
            return __classPrivateFieldGet(ServerMember, _a, "f", _ServerMember_storage).get(key(this.id)).avatar;
        }
        /**
         * List of role IDs
         */
        get roles() {
            return __classPrivateFieldGet(ServerMember, _a, "f", _ServerMember_storage).get(key(this.id)).roles;
        }
        /**
         * Time at which timeout expires
         */
        get timeout() {
            return __classPrivateFieldGet(ServerMember, _a, "f", _ServerMember_storage).get(key(this.id)).timeout;
        }
    },
    _ServerMember_storage = { value: new ObjectStorage_1.ObjectStorage() },
    _ServerMember_objects = { value: {} },
    /**
     * Deterministic conversion of member composite key to string ID
     * @param key Key
     * @returns String key
     */
    _a.keyToString = key,
    _a; };
