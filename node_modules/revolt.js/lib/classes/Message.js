"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ulid_1 = require("ulid");
const ObjectStorage_1 = require("../storage/ObjectStorage");
exports.default = (client) => { var _a, _Message_storage, _Message_objects; return _a = 
/**
 * Message Class
 */
class Message {
        /**
         * Get an existing Message
         * @param id Message ID
         * @returns Message
         */
        static get(id) {
            return __classPrivateFieldGet(Message, _a, "f", _Message_objects)[id];
        }
        /**
         * Fetch message by ID
         * @param channelId Channel ID
         * @param messageId Message ID
         * @returns Message
         */
        static fetch(channelId, messageId) {
            return __awaiter(this, void 0, void 0, function* () {
                const message = Message.get(messageId);
                if (message)
                    return message;
                const data = yield client.api.get(`/channels/${channelId}/messages/${messageId}`);
                return new Message(messageId, data);
            });
        }
        /**
         * Construct Message
         * @param id Message Id
         */
        constructor(id, data) {
            __classPrivateFieldGet(Message, _a, "f", _Message_storage).hydrate(id, "message", data);
            __classPrivateFieldGet(Message, _a, "f", _Message_objects)[id] = this;
            this.id = id;
        }
        /**
         * Time when this message was posted
         */
        get createdAt() {
            return new Date((0, ulid_1.decodeTime)(this.id));
        }
        /**
         * Nonce value
         */
        get nonce() {
            return __classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).nonce;
        }
        /**
         * Channel this message was sent in
         */
        get channel() {
            return client.channels.get(__classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).channelId);
        }
        /**
         * User this message was sent by
         */
        get author() {
            return client.users.get(__classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).authorId);
        }
        /**
         * Content
         */
        get content() {
            return __classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).content;
        }
        /**
         * System message content
         */
        get systemMessage() {
            return __classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).systemMessage;
        }
        /**
         * Attachments
         */
        get attachments() {
            return __classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).attachments;
        }
        /**
         * Time at which this message was edited
         */
        get editedAt() {
            return __classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).editedAt;
        }
        /**
         * Embeds
         */
        get embeds() {
            return __classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).embeds;
        }
        /**
         * IDs of users this message mentions
         */
        get mentionIds() {
            return __classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).mentionIds;
        }
        /**
         * IDs of messages this message replies to
         */
        get replyIds() {
            return __classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).replyIds;
        }
        /**
         * Reactions
         */
        get reactions() {
            return __classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).reactions;
        }
        /**
         * Interactions
         */
        get interactions() {
            return __classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).interactions;
        }
        /**
         * Masquerade
         */
        get masquerade() {
            return __classPrivateFieldGet(Message, _a, "f", _Message_storage).get(this.id).masquerade;
        }
    },
    _Message_storage = { value: new ObjectStorage_1.ObjectStorage() },
    _Message_objects = { value: {} },
    _a; };
