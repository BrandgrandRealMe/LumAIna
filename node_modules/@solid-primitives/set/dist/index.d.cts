import { Accessor } from 'solid-js';

/**
 * A reactive version of a Javascript built-in `Set` class.
 * @see https://github.com/solidjs-community/solid-primitives/tree/main/packages/set#ReactiveSet
 * @example
 * const set = new ReactiveSet([1,2,3]);
 * [...set] // reactive on any change
 * set.has(2) // reactive on change to the result
 * // apply changes
 * set.add(4)
 * set.delete(2)
 * set.clear()
 */
declare class ReactiveSet<T> extends Set<T> {
    #private;
    constructor(values?: Iterable<T> | null);
    get size(): number;
    has(v: T): boolean;
    keys(): IterableIterator<T>;
    values(): IterableIterator<T>;
    entries(): IterableIterator<[T, T]>;
    [Symbol.iterator](): IterableIterator<T>;
    forEach(callbackfn: (value: T, value2: T, set: this) => void): void;
    add(v: T): this;
    delete(v: T): boolean;
    clear(): void;
}
/**
 * A reactive version of a Javascript built-in `WeakSet` class.
 * @see https://github.com/solidjs-community/solid-primitives/tree/main/packages/set#ReactiveWeakSet
 * @example
 * const set = new ReactiveWeakSet([1,2,3]);
 * set.has(2) // reactive on change to the result
 * // apply changes
 * set.add(4)
 * set.delete(2)
 */
declare class ReactiveWeakSet<T extends object> extends WeakSet<T> {
    #private;
    constructor(values?: Iterable<T> | null);
    has(v: T): boolean;
    add(v: T): this;
    delete(v: T): boolean;
}
/** @deprecated */
type SignalSet<T> = Accessor<T[]> & ReactiveSet<T>;
/** @deprecated */
declare function createSet<T>(initial?: T[]): SignalSet<T>;
/** @deprecated */
declare function createWeakSet<T extends object>(initial?: T[]): ReactiveWeakSet<T>;

export { ReactiveSet, ReactiveWeakSet, SignalSet, createSet, createWeakSet };
